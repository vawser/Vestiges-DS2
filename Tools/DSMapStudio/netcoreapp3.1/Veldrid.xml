<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Veldrid</name>
    </assembly>
    <members>
        <member name="T:Veldrid.Android.AndroidRuntime">
            <summary>
            Function imports from the Android runtime library (android.so).
            </summary>
        </member>
        <member name="T:Veldrid.BackendInfoD3D11">
            <summary>
            Exposes Direct3D 11-specific functionality, useful for interoperating with native components which interface directly with
            Direct3D 11. Can only be used on a GraphicsDevice whose GraphicsBackend is D3D11.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoD3D11.Device">
            <summary>
            Gets a pointer to the ID3D11Device controlled by the GraphicsDevice.
            </summary>
        </member>
        <member name="M:Veldrid.BackendInfoD3D11.GetTexturePointer(Veldrid.Texture)">
            <summary>
            Gets a pointer to the native texture wrapped by the given Veldrid Texture. Depending on the instance's TextureType,
            this will be a pointer to an ID3D11Texture1D, an ID3D11Texture2D, or an ID3D11Texture3D.
            </summary>
            <returns>A pointer to the Veldrid Texture's underlying ID3D11Texture1D, ID3D11Texture2D, or ID3D11Texture3D. The type
            of this object depends on the parameter's TextureType.</returns>
        </member>
        <member name="T:Veldrid.BackendInfoOpenGL">
            <summary>
            Exposes OpenGL-specific functionality, useful for interoperating with native components which interface directly with
            OpenGL. Can only be used on a GraphicsDevice whose GraphicsBackend is OpenGL.
            </summary>
        </member>
        <member name="M:Veldrid.BackendInfoOpenGL.ExecuteOnGLThread(System.Action)">
            <summary>
            Executes the given delegate in the OpenGL device's main execution thread. In the delegate, OpenGL commands can be
            executed directly. This method does not return until the delegate's execution is fully completed.
            </summary>
        </member>
        <member name="M:Veldrid.BackendInfoOpenGL.FlushAndFinish">
            <summary>
            Executes a glFlush and a glFinish command, and waits for their completion.
            </summary>
        </member>
        <member name="M:Veldrid.BackendInfoOpenGL.GetTextureName(Veldrid.Texture)">
            <summary>
            Gets the name of the OpenGL texture object wrapped by the given Veldrid Texture.
            </summary>
            <returns>The Veldrid Texture's underlying OpenGL texture name.</returns>
        </member>
        <member name="T:Veldrid.BackendInfoVulkan">
            <summary>
            Exposes Vulkan-specific functionality, useful for interoperating with native components which interface directly with
            Vulkan. Can only be used on a GraphicsDevice whose GraphicsBackend is Vulkan.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoVulkan.Instance">
            <summary>
            Gets the underlying VkInstance used by the GraphicsDevice.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoVulkan.Device">
            <summary>
            Gets the underlying VkDevice used by the GraphicsDevice.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoVulkan.PhysicalDevice">
            <summary>
            Gets the underlying VkPhysicalDevice used by the GraphicsDevice.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoVulkan.GraphicsQueue">
            <summary>
            Gets the VkQueue which is used by the GraphicsDevice to submit graphics work.
            </summary>
        </member>
        <member name="P:Veldrid.BackendInfoVulkan.GraphicsQueueFamilyIndex">
            <summary>
            Gets the queue family index of the graphics VkQueue.
            </summary>
        </member>
        <member name="M:Veldrid.BackendInfoVulkan.OverrideImageLayout(Veldrid.Texture,System.UInt32)">
            <summary>
            Overrides the current VkImageLayout tracked by the given Texture. This should be used when a VkImage is created by
            an external library to inform Veldrid about its initial layout.
            </summary>
            <param name="texture">The Texture whose currently-tracked VkImageLayout will be overridden.</param>
            <param name="layout">The new VkImageLayout value.</param>
        </member>
        <member name="M:Veldrid.BackendInfoVulkan.GetVkImage(Veldrid.Texture)">
            <summary>
            Gets the underlying VkImage wrapped by the given Veldrid Texture. This method can not be used on Textures with
            TextureUsage.Staging.
            </summary>
            <param name="texture">The Texture whose underlying VkImage will be returned.</param>
            <returns>The underlying VkImage for the given Texture.</returns>
        </member>
        <member name="M:Veldrid.BackendInfoVulkan.TransitionImageLayout(Veldrid.Texture,System.UInt32)">
            <summary>
            Transitions the given Texture's underlying VkImage into a new layout.
            </summary>
            <param name="texture">The Texture whose underlying VkImage will be transitioned.</param>
            <param name="layout">The new VkImageLayout value.</param>
        </member>
        <member name="T:Veldrid.BindableResource">
            <summary>
            A resource which can be bound in a <see cref="T:Veldrid.ResourceSet"/> and used in a shader.
            See <see cref="T:Veldrid.DeviceBuffer"/>, <see cref="T:Veldrid.DeviceBufferRange"/>, <see cref="T:Veldrid.Texture"/>, <see cref="T:Veldrid.TextureView"/>
            and <see cref="T:Veldrid.Sampler"/>.
            </summary>
        </member>
        <member name="T:Veldrid.BlendAttachmentDescription">
            <summary>
            A <see cref="T:Veldrid.Pipeline"/> component describing the blend behavior for an individual color attachment.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.BlendEnabled">
            <summary>
            Controls whether blending is enabled for the color attachment.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.SourceColorFactor">
            <summary>
            Controls the source color's influence on the blend result.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.DestinationColorFactor">
            <summary>
            Controls the destination color's influence on the blend result.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.ColorFunction">
            <summary>
            Controls the function used to combine the source and destination color factors.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.SourceAlphaFactor">
            <summary>
            Controls the source alpha's influence on the blend result.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.DestinationAlphaFactor">
            <summary>
            Controls the destination alpha's influence on the blend result.
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.AlphaFunction">
            <summary>
            Controls the function used to combine the source and destination alpha factors.
            </summary>
        </member>
        <member name="M:Veldrid.BlendAttachmentDescription.#ctor(System.Boolean,Veldrid.BlendFactor,Veldrid.BlendFactor,Veldrid.BlendFunction,Veldrid.BlendFactor,Veldrid.BlendFactor,Veldrid.BlendFunction)">
            <summary>
            Constructs a new <see cref="T:Veldrid.BlendAttachmentDescription"/>.
            </summary>
            <param name="blendEnabled">Controls whether blending is enabled for the color attachment.</param>
            <param name="sourceColorFactor">Controls the source color's influence on the blend result.</param>
            <param name="destinationColorFactor">Controls the destination color's influence on the blend result.</param>
            <param name="colorFunction">Controls the function used to combine the source and destination color factors.</param>
            <param name="sourceAlphaFactor">Controls the source alpha's influence on the blend result.</param>
            <param name="destinationAlphaFactor">Controls the destination alpha's influence on the blend result.</param>
            <param name="alphaFunction">Controls the function used to combine the source and destination alpha factors.</param>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.OverrideBlend">
            <summary>
            Describes a blend attachment state in which the source completely overrides the destination.
            Settings:
                BlendEnabled = true
                SourceColorFactor = BlendFactor.One
                DestinationColorFactor = BlendFactor.Zero
                ColorFunction = BlendFunction.Add
                SourceAlphaFactor = BlendFactor.One
                DestinationAlphaFactor = BlendFactor.Zero
                AlphaFunction = BlendFunction.Add
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.AlphaBlend">
            <summary>
            Describes a blend attachment state in which the source and destination are blended in an inverse relationship.
            Settings:
                BlendEnabled = true
                SourceColorFactor = BlendFactor.SourceAlpha
                DestinationColorFactor = BlendFactor.InverseSourceAlpha
                ColorFunction = BlendFunction.Add
                SourceAlphaFactor = BlendFactor.SourceAlpha
                DestinationAlphaFactor = BlendFactor.InverseSourceAlpha
                AlphaFunction = BlendFunction.Add
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.AdditiveBlend">
            <summary>
            Describes a blend attachment state in which the source is added to the destination based on its alpha channel.
            Settings:
                BlendEnabled = true
                SourceColorFactor = BlendFactor.SourceAlpha
                DestinationColorFactor = BlendFactor.One
                ColorFunction = BlendFunction.Add
                SourceAlphaFactor = BlendFactor.SourceAlpha
                DestinationAlphaFactor = BlendFactor.One
                AlphaFunction = BlendFunction.Add
            </summary>
        </member>
        <member name="F:Veldrid.BlendAttachmentDescription.Disabled">
            <summary>
            Describes a blend attachment state in which blending is disabled.
            Settings:
                BlendEnabled = false
                SourceColorFactor = BlendFactor.One
                DestinationColorFactor = BlendFactor.Zero
                ColorFunction = BlendFunction.Add
                SourceAlphaFactor = BlendFactor.One
                DestinationAlphaFactor = BlendFactor.Zero
                AlphaFunction = BlendFunction.Add
            </summary>
        </member>
        <member name="M:Veldrid.BlendAttachmentDescription.Equals(Veldrid.BlendAttachmentDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.BlendAttachmentDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.BlendFactor">
            <summary>
            Controls the influence of components in a blend operation.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.Zero">
            <summary>
            Each component is multiplied by 0.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.One">
            <summary>
            Each component is multiplied by 1.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.SourceAlpha">
            <summary>
            Each component is multiplied by the source alpha component.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.InverseSourceAlpha">
            <summary>
            Each component is multiplied by (1 - source alpha).
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.DestinationAlpha">
            <summary>
            Each component is multiplied by the destination alpha component.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.InverseDestinationAlpha">
            <summary>
            Each component is multiplied by (1 - destination alpha).
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.SourceColor">
            <summary>
            Each component is multiplied by the matching component of the source color.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.InverseSourceColor">
            <summary>
            Each component is multiplied by (1 - the matching component of the source color).
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.DestinationColor">
            <summary>
            Each component is multiplied by the matching component of the destination color.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.InverseDestinationColor">
            <summary>
            Each component is multiplied by (1 - the matching component of the destination color).
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.BlendFactor">
            <summary>
            Each component is multiplied by the matching component in constant factor specified in <see cref="F:Veldrid.BlendStateDescription.BlendFactor"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFactor.InverseBlendFactor">
            <summary>
            Each component is multiplied by (1 - the matching component in constant factor specified in <see cref="F:Veldrid.BlendStateDescription.BlendFactor"/>).
            </summary>
        </member>
        <member name="T:Veldrid.BlendFunction">
            <summary>
            Controls how the source and destination factors are combined in a blend operation.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFunction.Add">
            <summary>
            Source and destination are added.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFunction.Subtract">
            <summary>
            Destination is subtracted from source.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFunction.ReverseSubtract">
            <summary>
            Source is subtracted from destination.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFunction.Minimum">
            <summary>
            The minimum of source and destination is selected.
            </summary>
        </member>
        <member name="F:Veldrid.BlendFunction.Maximum">
            <summary>
            The maximum of source and destination is selected.
            </summary>
        </member>
        <member name="T:Veldrid.BlendStateDescription">
            <summary>
            A <see cref="T:Veldrid.Pipeline"/> component describing how values are blended into each individual color target.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.BlendFactor">
            <summary>
            A constant blend color used in <see cref="F:Veldrid.BlendFactor.BlendFactor"/> and <see cref="F:Veldrid.BlendFactor.InverseBlendFactor"/>,
            or otherwise ignored.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.AttachmentStates">
            <summary>
            An array of <see cref="T:Veldrid.BlendAttachmentDescription"/> describing how blending is performed for each color target
            used in the <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.AlphaToCoverageEnabled">
            <summary>
            Enables alpha-to-coverage, which causes a fragment's alpha value to be used when determining multi-sample coverage.
            </summary>
        </member>
        <member name="M:Veldrid.BlendStateDescription.#ctor(Veldrid.RgbaFloat,Veldrid.BlendAttachmentDescription[])">
            <summary>
            Constructs a new <see cref="T:Veldrid.BlendStateDescription"/>,
            </summary>
            <param name="blendFactor">The constant blend color.</param>
            <param name="attachmentStates">The blend attachment states.</param>
        </member>
        <member name="M:Veldrid.BlendStateDescription.#ctor(Veldrid.RgbaFloat,System.Boolean,Veldrid.BlendAttachmentDescription[])">
            <summary>
            Constructs a new <see cref="T:Veldrid.BlendStateDescription"/>,
            </summary>
            <param name="blendFactor">The constant blend color.</param>
            <param name="alphaToCoverageEnabled">Enables alpha-to-coverage, which causes a fragment's alpha value to be
            used when determining multi-sample coverage.</param>
            <param name="attachmentStates">The blend attachment states.</param>
        </member>
        <member name="F:Veldrid.BlendStateDescription.SingleOverrideBlend">
            <summary>
            Describes a blend state in which a single color target is blended with <see cref="F:Veldrid.BlendAttachmentDescription.OverrideBlend"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.SingleAlphaBlend">
            <summary>
            Describes a blend state in which a single color target is blended with <see cref="F:Veldrid.BlendAttachmentDescription.AlphaBlend"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.SingleAdditiveBlend">
            <summary>
            Describes a blend state in which a single color target is blended with <see cref="F:Veldrid.BlendAttachmentDescription.AdditiveBlend"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.SingleDisabled">
            <summary>
            Describes a blend state in which a single color target is blended with <see cref="F:Veldrid.BlendAttachmentDescription.Disabled"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BlendStateDescription.Empty">
            <summary>
            Describes an empty blend state in which no color targets are used.
            </summary>
        </member>
        <member name="M:Veldrid.BlendStateDescription.Equals(Veldrid.BlendStateDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.BlendStateDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.DeviceBuffer">
            <summary>
            A device resource used to store arbitrary graphics data in various formats.
            The size of a <see cref="T:Veldrid.DeviceBuffer"/> is fixed upon creation, and resizing is not possible.
            See <see cref="T:Veldrid.BufferDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.DeviceBuffer.SizeInBytes">
            <summary>
            The total capacity, in bytes, of the buffer. This value is fixed upon creation.
            </summary>
        </member>
        <member name="P:Veldrid.DeviceBuffer.Usage">
            <summary>
            A bitmask indicating how this instance is permitted to be used.
            </summary>
        </member>
        <member name="P:Veldrid.DeviceBuffer.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.DeviceBuffer.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.BufferDescription">
            <summary>
            Describes a <see cref="T:Veldrid.DeviceBuffer"/>, used in the creation of <see cref="T:Veldrid.DeviceBuffer"/> objects by a
            <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BufferDescription.SizeInBytes">
            <summary>
            The desired capacity, in bytes, of the <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BufferDescription.Usage">
            <summary>
            Indicates how the <see cref="T:Veldrid.DeviceBuffer"/> will be used.
            </summary>
        </member>
        <member name="F:Veldrid.BufferDescription.StructureByteStride">
            <summary>
            For structured buffers, this value indicates the size in bytes of a single structure element, and must be non-zero.
            For all other buffer types, this value must be zero.
            </summary>
        </member>
        <member name="F:Veldrid.BufferDescription.RawBuffer">
            <summary>
            Indicates that this is a raw buffer. This should be combined with
            <see cref="F:Veldrid.BufferUsage.StructuredBufferReadWrite"/>. This affects how the buffer is bound in the D3D11 backend.
            </summary>
        </member>
        <member name="M:Veldrid.BufferDescription.#ctor(System.UInt32,Veldrid.BufferUsage)">
            <summary>
            Constructs a new <see cref="T:Veldrid.BufferDescription"/> describing a non-dynamic <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
            <param name="sizeInBytes">The desired capacity, in bytes.</param>
            <param name="usage">Indicates how the <see cref="T:Veldrid.DeviceBuffer"/> will be used.</param>
        </member>
        <member name="M:Veldrid.BufferDescription.#ctor(System.UInt32,Veldrid.BufferUsage,System.UInt32)">
            <summary>
            Constructs a new <see cref="T:Veldrid.BufferDescription"/>.
            </summary>
            <param name="sizeInBytes">The desired capacity, in bytes.</param>
            <param name="usage">Indicates how the <see cref="T:Veldrid.DeviceBuffer"/> will be used.</param>
            <param name="structureByteStride">For structured buffers, this value indicates the size in bytes of a single
            structure element, and must be non-zero. For all other buffer types, this value must be zero.</param>
        </member>
        <member name="M:Veldrid.BufferDescription.#ctor(System.UInt32,Veldrid.BufferUsage,System.UInt32,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Veldrid.BufferDescription"/>.
            </summary>
            <param name="sizeInBytes">The desired capacity, in bytes.</param>
            <param name="usage">Indicates how the <see cref="T:Veldrid.DeviceBuffer"/> will be used.</param>
            <param name="structureByteStride">For structured buffers, this value indicates the size in bytes of a single
            structure element, and must be non-zero. For all other buffer types, this value must be zero.</param>
            <param name="rawBuffer">Indicates that this is a raw buffer. This should be combined with
            <see cref="F:Veldrid.BufferUsage.StructuredBufferReadWrite"/>. This affects how the buffer is bound in the D3D11 backend.
            </param>
        </member>
        <member name="M:Veldrid.BufferDescription.Equals(Veldrid.BufferDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.BufferDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.BufferUsage">
            <summary>
            A bitmask describing the permitted uses of a <see cref="T:Veldrid.DeviceBuffer"/> object.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.VertexBuffer">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as the source of vertex data for drawing commands.
            This flag enables the use of a Buffer in the <see cref="M:Veldrid.CommandList.SetVertexBuffer(System.UInt32,Veldrid.DeviceBuffer)"/> method.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.IndexBuffer">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as the source of index data for drawing commands.
            This flag enables the use of a Buffer in the <see cref="M:Veldrid.CommandList.SetIndexBuffer(Veldrid.DeviceBuffer,Veldrid.IndexFormat)" /> method.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.UniformBuffer">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as a uniform Buffer.
            This flag enables the use of a Buffer in a <see cref="T:Veldrid.ResourceSet"/> as a uniform Buffer.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.StructuredBufferReadOnly">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as a read-only structured Buffer.
            This flag enables the use of a Buffer in a <see cref="T:Veldrid.ResourceSet"/> as a read-only structured Buffer.
            This flag can only be combined with <see cref="F:Veldrid.BufferUsage.Dynamic"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.StructuredBufferReadWrite">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as a read-write structured Buffer.
            This flag enables the use of a Buffer in a <see cref="T:Veldrid.ResourceSet"/> as a read-write structured Buffer.
            This flag cannot be combined with any other flag.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.IndirectBuffer">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> can be used as the source of indirect drawing information.
            This flag enables the use of a Buffer in the *Indirect methods of <see cref="T:Veldrid.CommandList"/>.
            This flag cannot be combined with <see cref="F:Veldrid.BufferUsage.Dynamic"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.Dynamic">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> will be updated with new data very frequently. Dynamic Buffers can be
            mapped with <see cref="F:Veldrid.MapMode.Write"/>. This flag cannot be combined with <see cref="F:Veldrid.BufferUsage.StructuredBufferReadWrite"/>
            or <see cref="F:Veldrid.BufferUsage.IndirectBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.BufferUsage.Staging">
            <summary>
            Indicates that a <see cref="T:Veldrid.DeviceBuffer"/> will be used as a staging Buffer. Staging Buffers can be used to transfer data
            to-and-from the CPU using <see cref="M:Veldrid.GraphicsDevice.Map(Veldrid.MappableResource,Veldrid.MapMode)"/>. Staging Buffers can use all
            <see cref="T:Veldrid.MapMode"/> values.
            This flag cannot be combined with any other flag.
            </summary>
        </member>
        <member name="T:Veldrid.CommandList">
            <summary>
            A device resource which allows the recording of graphics commands, which can later be executed by a
            <see cref="T:Veldrid.GraphicsDevice"/>.
            Before graphics commands can be issued, the <see cref="M:Veldrid.CommandList.Begin"/> method must be invoked.
            When the <see cref="T:Veldrid.CommandList"/> is ready to be executed, <see cref="M:Veldrid.CommandList.End"/> must be invoked, and then
            <see cref="M:Veldrid.GraphicsDevice.SubmitCommands(Veldrid.CommandList)"/> should be used.
            NOTE: The use of <see cref="T:Veldrid.CommandList"/> is not thread-safe. Access to the <see cref="T:Veldrid.CommandList"/> must be
            externally synchronized.
            There are some limitations dictating proper usage and ordering of graphics commands. For example, a
            <see cref="T:Veldrid.Framebuffer"/>, <see cref="T:Veldrid.Pipeline"/>, vertex buffer, and index buffer must all be
            bound before a call to <see cref="M:Veldrid.CommandList.DrawIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)"/> will succeed.
            These limitations are described in each function, where applicable.
            <see cref="T:Veldrid.CommandList"/> instances cannot be executed multiple times per-recording. When executed by a
            <see cref="T:Veldrid.GraphicsDevice"/>, they must be reset and commands must be issued again.
            See <see cref="T:Veldrid.CommandListDescription"/>.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.Begin">
            <summary>
            Puts this <see cref="T:Veldrid.CommandList"/> into the initial state.
            This function must be called before other graphics commands can be issued.
            Begin must only be called if it has not been previously called, if <see cref="M:Veldrid.CommandList.End"/> has been called,
            or if <see cref="M:Veldrid.GraphicsDevice.SubmitCommands(Veldrid.CommandList)"/> has been called on this instance.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.End">
            <summary>
            Completes this list of graphics commands, putting it into an executable state for a <see cref="T:Veldrid.GraphicsDevice"/>.
            This function must only be called after <see cref="M:Veldrid.CommandList.Begin"/> has been called.
            It is an error to call this function in succession, unless <see cref="M:Veldrid.CommandList.Begin"/> has been called in between invocations.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.SetPipeline(Veldrid.Pipeline)">
            <summary>
            Sets the active <see cref="T:Veldrid.Pipeline"/> used for rendering.
            When drawing, the active <see cref="T:Veldrid.Pipeline"/> must be compatible with the bound <see cref="T:Veldrid.Framebuffer"/>,
            <see cref="T:Veldrid.ResourceSet"/>, and <see cref="T:Veldrid.DeviceBuffer"/> objects.
            When a new Pipeline is set, the previously-bound ResourceSets on this CommandList become invalidated and must be
            re-bound.
            </summary>
            <param name="pipeline">The new <see cref="T:Veldrid.Pipeline"/> object.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetVertexBuffer(System.UInt32,Veldrid.DeviceBuffer)">
            <summary>
            Sets the active <see cref="T:Veldrid.DeviceBuffer"/> for the given index.
            When drawing, the bound <see cref="T:Veldrid.DeviceBuffer"/> objects must be compatible with the bound <see cref="T:Veldrid.Pipeline"/>.
            The given buffer must be non-null. It is not necessary to un-bind vertex buffers for Pipelines which will not
            use them. All extra vertex buffers are simply ignored.
            </summary>
            <param name="index">The buffer slot.</param>
            <param name="buffer">The new <see cref="T:Veldrid.DeviceBuffer"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetVertexBuffer(System.UInt32,Veldrid.DeviceBuffer,System.UInt32)">
            <summary>
            Sets the active <see cref="T:Veldrid.DeviceBuffer"/> for the given index.
            When drawing, the bound <see cref="T:Veldrid.DeviceBuffer"/> objects must be compatible with the bound <see cref="T:Veldrid.Pipeline"/>.
            The given buffer must be non-null. It is not necessary to un-bind vertex buffers for Pipelines which will not
            use them. All extra vertex buffers are simply ignored.
            </summary>
            <param name="index">The buffer slot.</param>
            <param name="buffer">The new <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="offset">The offset from the start of the buffer, in bytes, from which data will start to be read.
            </param>
        </member>
        <member name="M:Veldrid.CommandList.SetIndexBuffer(Veldrid.DeviceBuffer,Veldrid.IndexFormat)">
            <summary>
            Sets the active <see cref="T:Veldrid.DeviceBuffer"/>.
            When drawing, an <see cref="T:Veldrid.DeviceBuffer"/> must be bound.
            </summary>
            <param name="buffer">The new <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="format">The format of data in the <see cref="T:Veldrid.DeviceBuffer"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetIndexBuffer(Veldrid.DeviceBuffer,Veldrid.IndexFormat,System.UInt32)">
            <summary>
            Sets the active <see cref="T:Veldrid.DeviceBuffer"/>.
            When drawing, an <see cref="T:Veldrid.DeviceBuffer"/> must be bound.
            </summary>
            <param name="buffer">The new <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="format">The format of data in the <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="offset">The offset from the start of the buffer, in bytes, from which data will start to be read.
            </param>
        </member>
        <member name="M:Veldrid.CommandList.SetGraphicsResourceSet(System.UInt32,Veldrid.ResourceSet)">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the graphics
            Pipeline.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetGraphicsResourceSet(System.UInt32,Veldrid.ResourceSet,System.UInt32[])">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the graphics
            Pipeline.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsets">An array containing the offsets to apply to the dynamic
            buffers contained in the <see cref="T:Veldrid.ResourceSet"/>. The number of elements in this array must be equal to the number
            of dynamic buffers (<see cref="F:Veldrid.ResourceLayoutElementOptions.DynamicBinding"/>) contained in the
            <see cref="T:Veldrid.ResourceSet"/>. These offsets are applied in the order that dynamic buffer
            elements appear in the <see cref="T:Veldrid.ResourceSet"/>. Each of these offsets must be a multiple of either
            <see cref="P:Veldrid.GraphicsDevice.UniformBufferMinOffsetAlignment"/> or
            <see cref="P:Veldrid.GraphicsDevice.StructuredBufferMinOffsetAlignment"/>, depending on the kind of resource.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetGraphicsResourceSet(System.UInt32,Veldrid.ResourceSet,System.UInt32,System.UInt32@)">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the graphics
            Pipeline.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsetsCount">The number of dynamic offsets being used. This must be equal to the number of
            dynamic buffers (<see cref="F:Veldrid.ResourceLayoutElementOptions.DynamicBinding"/>) contained in the
            <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsets">A reference to the first of a series of offsets which will be applied to the dynamic
            buffers contained in the <see cref="T:Veldrid.ResourceSet"/>. These offsets are applied in the order that dynamic buffer
            elements appear in the <see cref="T:Veldrid.ResourceSet"/>. Each of these offsets must be a multiple of either
            <see cref="P:Veldrid.GraphicsDevice.UniformBufferMinOffsetAlignment"/> or
            <see cref="P:Veldrid.GraphicsDevice.StructuredBufferMinOffsetAlignment"/>, depending on the kind of resource.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetGraphicsResourceSetCore(System.UInt32,Veldrid.ResourceSet,System.UInt32,System.UInt32@)">
            <summary>
            </summary>
            <param name="slot"></param>
            <param name="rs"></param>
            <param name="dynamicOffsets"></param>
            <param name="dynamicOffsetsCount"></param>
        </member>
        <member name="M:Veldrid.CommandList.SetComputeResourceSet(System.UInt32,Veldrid.ResourceSet)">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the compute
            <see cref="T:Veldrid.Pipeline"/>.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetComputeResourceSet(System.UInt32,Veldrid.ResourceSet,System.UInt32[])">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the compute
            <see cref="T:Veldrid.Pipeline"/>.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsets">An array containing the offsets to apply to the dynamic buffers contained in the
            <see cref="T:Veldrid.ResourceSet"/>. The number of elements in this array must be equal to the number of dynamic buffers
            (<see cref="F:Veldrid.ResourceLayoutElementOptions.DynamicBinding"/>) contained in the <see cref="T:Veldrid.ResourceSet"/>. These offsets
            are applied in the order that dynamic buffer elements appear in the <see cref="T:Veldrid.ResourceSet"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetComputeResourceSet(System.UInt32,Veldrid.ResourceSet,System.UInt32,System.UInt32@)">
            <summary>
            Sets the active <see cref="T:Veldrid.ResourceSet"/> for the given index. This ResourceSet is only active for the compute
            <see cref="T:Veldrid.Pipeline"/>.
            </summary>
            <param name="slot">The resource slot.</param>
            <param name="rs">The new <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsetsCount">The number of dynamic offsets being used. This must be equal to the number of
            dynamic buffers (<see cref="F:Veldrid.ResourceLayoutElementOptions.DynamicBinding"/>) contained in the
            <see cref="T:Veldrid.ResourceSet"/>.</param>
            <param name="dynamicOffsets">A reference to the first of a series of offsets which will be applied to the dynamic
            buffers contained in the <see cref="T:Veldrid.ResourceSet"/>. These offsets are applied in the order that dynamic buffer
            elements appear in the <see cref="T:Veldrid.ResourceSet"/>. Each of these offsets must be a multiple of either
            <see cref="P:Veldrid.GraphicsDevice.UniformBufferMinOffsetAlignment"/> or
            <see cref="P:Veldrid.GraphicsDevice.StructuredBufferMinOffsetAlignment"/>, depending on the kind of resource.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetComputeResourceSetCore(System.UInt32,Veldrid.ResourceSet,System.UInt32,System.UInt32@)">
            <summary>
            </summary>
            <param name="slot"></param>
            <param name="set"></param>
            <param name="dynamicOffsetsCount"></param>
            <param name="dynamicOffsets"></param>
        </member>
        <member name="M:Veldrid.CommandList.SetFramebuffer(Veldrid.Framebuffer)">
            <summary>
            Sets the active <see cref="T:Veldrid.Framebuffer"/> which will be rendered to.
            When drawing, the active <see cref="T:Veldrid.Framebuffer"/> must be compatible with the active <see cref="T:Veldrid.Pipeline"/>.
            A compatible <see cref="T:Veldrid.Pipeline"/> has the same number of output attachments with matching formats.
            </summary>
            <param name="fb">The new <see cref="T:Veldrid.Framebuffer"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetFramebufferCore(Veldrid.Framebuffer)">
            <summary>
            Performs API-specific handling of the <see cref="T:Veldrid.Framebuffer"/> resource.
            </summary>
            <param name="fb"></param>
        </member>
        <member name="M:Veldrid.CommandList.ClearColorTarget(System.UInt32,Veldrid.RgbaFloat)">
            <summary>
            Clears the color target at the given index of the active <see cref="T:Veldrid.Framebuffer"/>.
            The index given must be less than the number of color attachments in the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
            <param name="clearColor">The value to clear the target to.</param>
        </member>
        <member name="M:Veldrid.CommandList.ClearDepthStencil(System.Single)">
            <summary>
            Clears the depth-stencil target of the active <see cref="T:Veldrid.Framebuffer"/>.
            The active <see cref="T:Veldrid.Framebuffer"/> must have a depth attachment.
            With this overload, the stencil buffer is cleared to 0.
            </summary>
            <param name="depth">The value to clear the depth buffer to.</param>
        </member>
        <member name="M:Veldrid.CommandList.ClearDepthStencil(System.Single,System.Byte)">
            <summary>
            Clears the depth-stencil target of the active <see cref="T:Veldrid.Framebuffer"/>.
            The active <see cref="T:Veldrid.Framebuffer"/> must have a depth attachment.
            </summary>
            <param name="depth">The value to clear the depth buffer to.</param>
            <param name="stencil">The value to clear the stencil buffer to.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetFullViewports">
            <summary>
            Sets all active viewports to cover the entire active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.SetFullViewport(System.UInt32)">
            <summary>
            Sets the active viewport at the given index to cover the entire active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetViewport(System.UInt32,Veldrid.Viewport)">
            <summary>
            Sets the active <see cref="T:Veldrid.Viewport"/> at the given index.
            The index given must be less than the number of color attachments in the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
            <param name="viewport">The new <see cref="T:Veldrid.Viewport"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetViewport(System.UInt32,Veldrid.Viewport@)">
            <summary>
            Sets the active <see cref="T:Veldrid.Viewport"/> at the given index.
            The index given must be less than the number of color attachments in the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
            <param name="viewport">The new <see cref="T:Veldrid.Viewport"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetFullScissorRects">
            <summary>
            Sets all active scissor rectangles to cover the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.SetFullScissorRect(System.UInt32)">
            <summary>
            Sets the active scissor rectangle at the given index to cover the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
        </member>
        <member name="M:Veldrid.CommandList.SetScissorRect(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sets the active scissor rectangle at the given index.
            The index given must be less than the number of color attachments in the active <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="index">The color target index.</param>
            <param name="x">The X value of the scissor rectangle.</param>
            <param name="y">The Y value of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
        </member>
        <member name="M:Veldrid.CommandList.Draw(System.UInt32)">
            <summary>
            Draws primitives from the currently-bound state in this CommandList. An index Buffer is not used.
            </summary>
            <param name="vertexCount">The number of vertices.</param>
        </member>
        <member name="M:Veldrid.CommandList.Draw(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draws primitives from the currently-bound state in this CommandList. An index Buffer is not used.
            </summary>
            <param name="vertexCount">The number of vertices.</param>
            <param name="instanceCount">The number of instances.</param>
            <param name="vertexStart">The first vertex to use when drawing.</param>
            <param name="instanceStart">The starting instance value.</param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndexed(System.UInt32)">
            <summary>
            Draws indexed primitives from the currently-bound state in this <see cref="T:Veldrid.CommandList"/>.
            </summary>
            <param name="indexCount">The number of indices.</param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Draws indexed primitives from the currently-bound state in this <see cref="T:Veldrid.CommandList"/>.
            </summary>
            <param name="indexCount">The number of indices.</param>
            <param name="instanceCount">The number of instances.</param>
            <param name="indexStart">The number of indices to skip in the active index buffer.</param>
            <param name="vertexOffset">The base vertex value, which is added to each index value read from the index buffer.</param>
            <param name="instanceStart">The starting instance value.</param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndirect(Veldrid.DeviceBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Issues indirect draw commands based on the information contained in the given indirect <see cref="T:Veldrid.DeviceBuffer"/>.
            The information stored in the indirect Buffer should conform to the structure of <see cref="T:Veldrid.IndirectDrawArguments"/>.
            </summary>
            <param name="indirectBuffer">The indirect Buffer to read from. Must have been created with the
            <see cref="F:Veldrid.BufferUsage.IndirectBuffer"/> flag.</param>
            <param name="offset">An offset, in bytes, from the start of the indirect buffer from which the draw commands will be
            read. This value must be a multiple of 4.</param>
            <param name="drawCount">The number of draw commands to read and issue from the indirect Buffer.</param>
            <param name="stride">The stride, in bytes, between consecutive draw commands in the indirect Buffer. This value must
            be a multiple of four, and must be larger than the size of <see cref="T:Veldrid.IndirectDrawArguments"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndirectCore(Veldrid.DeviceBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            </summary>
            <param name="indirectBuffer"></param>
            <param name="offset"></param>
            <param name="drawCount"></param>
            <param name="stride"></param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndexedIndirect(Veldrid.DeviceBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Issues indirect, indexed draw commands based on the information contained in the given indirect <see cref="T:Veldrid.DeviceBuffer"/>.
            The information stored in the indirect Buffer should conform to the structure of
            <see cref="T:Veldrid.IndirectDrawIndexedArguments"/>.
            </summary>
            <param name="indirectBuffer">The indirect Buffer to read from. Must have been created with the
            <see cref="F:Veldrid.BufferUsage.IndirectBuffer"/> flag.</param>
            <param name="offset">An offset, in bytes, from the start of the indirect buffer from which the draw commands will be
            read. This value must be a multiple of 4.</param>
            <param name="drawCount">The number of draw commands to read and issue from the indirect Buffer.</param>
            <param name="stride">The stride, in bytes, between consecutive draw commands in the indirect Buffer. This value must
            be a multiple of four, and must be larger than the size of <see cref="T:Veldrid.IndirectDrawIndexedArguments"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.DrawIndexedIndirectCore(Veldrid.DeviceBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            </summary>
            <param name="indirectBuffer"></param>
            <param name="offset"></param>
            <param name="drawCount"></param>
            <param name="stride"></param>
        </member>
        <member name="M:Veldrid.CommandList.Dispatch(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Dispatches a compute operation from the currently-bound compute state of this Pipeline.
            </summary>
            <param name="groupCountX">The X dimension of the compute thread groups that are dispatched.</param>
            <param name="groupCountY">The Y dimension of the compute thread groups that are dispatched.</param>
            <param name="groupCountZ">The Z dimension of the compute thread groups that are dispatched.</param>
        </member>
        <member name="M:Veldrid.CommandList.DispatchIndirect(Veldrid.DeviceBuffer,System.UInt32)">
            <summary>
            Issues an indirect compute dispatch command based on the information contained in the given indirect
            <see cref="T:Veldrid.DeviceBuffer"/>. The information stored in the indirect Buffer should conform to the structure of
            <see cref="T:Veldrid.IndirectDispatchArguments"/>.
            </summary>
            <param name="indirectBuffer">The indirect Buffer to read from. Must have been created with the
            <see cref="F:Veldrid.BufferUsage.IndirectBuffer"/> flag.</param>
            <param name="offset">An offset, in bytes, from the start of the indirect buffer from which the draw commands will be
            read. This value must be a multiple of 4.</param>
        </member>
        <member name="M:Veldrid.CommandList.DispatchIndirectCore(Veldrid.DeviceBuffer,System.UInt32)">
            <summary>
            </summary>
            <param name="indirectBuffer"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Veldrid.CommandList.ResolveTexture(Veldrid.Texture,Veldrid.Texture)">
            <summary>
            Resolves a multisampled source <see cref="T:Veldrid.Texture"/> into a non-multisampled destination <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="source">The source of the resolve operation. Must be a multisampled <see cref="T:Veldrid.Texture"/>
            (<see cref="P:Veldrid.Texture.SampleCount"/> > 1).</param>
            <param name="destination">The destination of the resolve operation. Must be a non-multisampled <see cref="T:Veldrid.Texture"/>
            (<see cref="P:Veldrid.Texture.SampleCount"/> == 1).</param>
        </member>
        <member name="M:Veldrid.CommandList.ResolveTextureCore(Veldrid.Texture,Veldrid.Texture)">
            <summary>
            Resolves a multisampled source <see cref="T:Veldrid.Texture"/> into a non-multisampled destination <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="source">The source of the resolve operation. Must be a multisampled <see cref="T:Veldrid.Texture"/>
            (<see cref="P:Veldrid.Texture.SampleCount"/> > 1).</param>
            <param name="destination">The destination of the resolve operation. Must be a non-multisampled <see cref="T:Veldrid.Texture"/>
            (<see cref="P:Veldrid.Texture.SampleCount"/> == 1).</param>
        </member>
        <member name="M:Veldrid.CommandList.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/> storage, at
            which new data will be uploaded.</param>
            <param name="source">The value to upload.</param>
        </member>
        <member name="M:Veldrid.CommandList.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0@)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A reference to the single value to upload.</param>
        </member>
        <member name="M:Veldrid.CommandList.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0@,System.UInt32)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A reference to the first of a series of values to upload.</param>
            <param name="sizeInBytes">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Veldrid.CommandList.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0[])">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">An array containing the data to upload.</param>
        </member>
        <member name="M:Veldrid.CommandList.UpdateBuffer(Veldrid.DeviceBuffer,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            </summary>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A pointer to the start of the data to upload.</param>
            <param name="sizeInBytes">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Veldrid.CommandList.CopyBuffer(Veldrid.DeviceBuffer,System.UInt32,Veldrid.DeviceBuffer,System.UInt32,System.UInt32)">
            <summary>
            Copies a region from the source <see cref="T:Veldrid.DeviceBuffer"/> to another region in the destination <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
            <param name="source">The source <see cref="T:Veldrid.DeviceBuffer"/> from which data will be copied.</param>
            <param name="sourceOffset">An offset into <paramref name="source"/> at which the copy region begins.</param>
            <param name="destination">The destination <see cref="T:Veldrid.DeviceBuffer"/> into which data will be copied.</param>
            <param name="destinationOffset">An offset into <paramref name="destination"/> at which the data will be copied.
            </param>
            <param name="sizeInBytes">The number of bytes to copy.</param>
        </member>
        <member name="M:Veldrid.CommandList.CopyBufferCore(Veldrid.DeviceBuffer,System.UInt32,Veldrid.DeviceBuffer,System.UInt32,System.UInt32)">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="sourceOffset"></param>
            <param name="destination"></param>
            <param name="destinationOffset"></param>
            <param name="sizeInBytes"></param>
        </member>
        <member name="M:Veldrid.CommandList.CopyTexture(Veldrid.Texture,Veldrid.Texture)">
            <summary>
            Copies all subresources from one <see cref="T:Veldrid.Texture"/> to another.
            </summary>
            <param name="source">The source of Texture data.</param>
            <param name="destination">The destination of Texture data.</param>
        </member>
        <member name="M:Veldrid.CommandList.CopyTexture(Veldrid.Texture,Veldrid.Texture,System.UInt32,System.UInt32)">
            <summary>
            Copies one subresource from one <see cref="T:Veldrid.Texture"/> to another.
            </summary>
            <param name="source">The source of Texture data.</param>
            <param name="destination">The destination of Texture data.</param>
            <param name="mipLevel">The mip level to copy.</param>
            <param name="arrayLayer">The array layer to copy.</param>
        </member>
        <member name="M:Veldrid.CommandList.CopyTexture(Veldrid.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies a region from one <see cref="T:Veldrid.Texture"/> into another.
            </summary>
            <param name="source">The source <see cref="T:Veldrid.Texture"/> from which data is copied.</param>
            <param name="srcX">The X coordinate of the source copy region.</param>
            <param name="srcY">The Y coordinate of the source copy region.</param>
            <param name="srcZ">The Z coordinate of the source copy region.</param>
            <param name="srcMipLevel">The mip level to copy from the source Texture.</param>
            <param name="srcBaseArrayLayer">The starting array layer to copy from the source Texture.</param>
            <param name="destination">The destination <see cref="T:Veldrid.Texture"/> into which data is copied.</param>
            <param name="dstX">The X coordinate of the destination copy region.</param>
            <param name="dstY">The Y coordinate of the destination copy region.</param>
            <param name="dstZ">The Z coordinate of the destination copy region.</param>
            <param name="dstMipLevel">The mip level to copy the data into.</param>
            <param name="dstBaseArrayLayer">The starting array layer to copy data into.</param>
            <param name="width">The width in texels of the copy region.</param>
            <param name="height">The height in texels of the copy region.</param>
            <param name="depth">The depth in texels of the copy region.</param>
            <param name="layerCount">The number of array layers to copy.</param>
        </member>
        <member name="M:Veldrid.CommandList.CopyTextureCore(Veldrid.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="srcX"></param>
            <param name="srcY"></param>
            <param name="srcZ"></param>
            <param name="srcMipLevel"></param>
            <param name="srcBaseArrayLayer"></param>
            <param name="destination"></param>
            <param name="dstX"></param>
            <param name="dstY"></param>
            <param name="dstZ"></param>
            <param name="dstMipLevel"></param>
            <param name="dstBaseArrayLayer"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="layerCount"></param>
        </member>
        <member name="M:Veldrid.CommandList.GenerateMipmaps(Veldrid.Texture)">
            <summary>
            Generates mipmaps for the given <see cref="T:Veldrid.Texture"/>. The largest mipmap is used to generate all of the lower mipmap
            levels contained in the Texture. The previous contents of all lower mipmap levels are overwritten by this operation.
            The target Texture must have been created with <see cref="T:Veldrid.TextureUsage"/>.<see cref="F:Veldrid.TextureUsage.GenerateMipmaps"/>.
            </summary>
            <param name="texture">The <see cref="T:Veldrid.Texture"/> to generate mipmaps for. This Texture must have been created with
            <see cref="T:Veldrid.TextureUsage"/>.<see cref="F:Veldrid.TextureUsage.GenerateMipmaps"/>.</param>
        </member>
        <member name="M:Veldrid.CommandList.PushDebugGroup(System.String)">
            <summary>
            Pushes a debug group at the current position in the <see cref="T:Veldrid.CommandList"/>. This allows subsequent commands to be
            categorized and filtered when viewed in external debugging tools. This method can be called multiple times in order
            to create nested debug groupings. Each call to PushDebugGroup must be followed by a matching call to
            <see cref="M:Veldrid.CommandList.PopDebugGroup"/>.
            </summary>
            <param name="name">The name of the group. This is an opaque identifier used for display by graphics debuggers.</param>
        </member>
        <member name="M:Veldrid.CommandList.PopDebugGroup">
            <summary>
            Pops the current debug group. This method must only be called after <see cref="M:Veldrid.CommandList.PushDebugGroup(System.String)"/> has been
            called on this instance.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.InsertDebugMarker(System.String)">
            <summary>
            Inserts a debug marker into the CommandList at the current position. This is used by graphics debuggers to identify
            points of interest in a command stream.
            </summary>
            <param name="name">The name of the marker. This is an opaque identifier used for display by graphics debuggers.</param>
        </member>
        <member name="P:Veldrid.CommandList.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.CommandList.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.CommandListDescription">
            <summary>
            Describes a <see cref="T:Veldrid.CommandList"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="M:Veldrid.CommandListDescription.Equals(Veldrid.CommandListDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.CommandListDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ComparisonKind">
            <summary>
            Describes how new values are compared with existing values in a depth or stencil comparison.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.Never">
            <summary>
            The comparison never succeeds.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.Less">
            <summary>
            The comparison succeeds when the new value is less than the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.Equal">
            <summary>
            The comparison succeeds when the new value is equal to the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.LessEqual">
            <summary>
            The comparison succeeds when the new value is less than or equal to the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.Greater">
            <summary>
            The comparison succeeds when the new value is greater than the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.NotEqual">
            <summary>
            The comparison succeeds when the new value is not equal to the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.GreaterEqual">
            <summary>
            The comparison succeeds when the new value is greater than or equal to the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.ComparisonKind.Always">
            <summary>
            The comparison always succeeds.
            </summary>
        </member>
        <member name="T:Veldrid.ComputePipelineDescription">
            <summary>
            Describes a compute <see cref="T:Veldrid.Pipeline"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.ComputeShader">
            <summary>
            The compute <see cref="T:Veldrid.Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="F:Veldrid.ShaderStages.Compute"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.ResourceLayouts">
            <summary>
            An array of <see cref="T:Veldrid.ResourceLayout"/>, which controls the layout of shader resoruces in the <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.ThreadGroupSizeX">
            <summary>
            The X dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.ThreadGroupSizeY">
            <summary>
            The Y dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.ThreadGroupSizeZ">
            <summary>
            The Z dimension of the thread group size.
            </summary>
        </member>
        <member name="F:Veldrid.ComputePipelineDescription.Specializations">
            <summary>
            An array of <see cref="T:Veldrid.SpecializationConstant"/> used to override specialization constants in the created
            <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes a single ID-value pair, which will be matched with the
            constants specified in the <see cref="T:Veldrid.Shader"/>.
            </summary>
        </member>
        <member name="M:Veldrid.ComputePipelineDescription.#ctor(Veldrid.Shader,Veldrid.ResourceLayout[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new ComputePipelineDescription.
            </summary>
            <param name="computeShader">The compute <see cref="T:Veldrid.Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="F:Veldrid.ShaderStages.Compute"/>.</param>
            <param name="resourceLayouts">The set of resource layouts available to the Pipeline.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
        </member>
        <member name="M:Veldrid.ComputePipelineDescription.#ctor(Veldrid.Shader,Veldrid.ResourceLayout,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new ComputePipelineDescription.
            </summary>
            <param name="shaderStage">The compute <see cref="T:Veldrid.Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="F:Veldrid.ShaderStages.Compute"/>.</param>
            <param name="resourceLayout">The resource layout available to the Pipeline.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
        </member>
        <member name="M:Veldrid.ComputePipelineDescription.#ctor(Veldrid.Shader,Veldrid.ResourceLayout,System.UInt32,System.UInt32,System.UInt32,Veldrid.SpecializationConstant[])">
            <summary>
            Constructs a new ComputePipelineDescription.
            </summary>
            <param name="shaderStage">The compute <see cref="T:Veldrid.Shader"/> to be used in the Pipeline. This must be a Shader with
            <see cref="F:Veldrid.ShaderStages.Compute"/>.</param>
            <param name="resourceLayout">The resource layout available to the Pipeline.</param>
            <param name="threadGroupSizeX">The X dimension of the thread group size.</param>
            <param name="threadGroupSizeY">The Y dimension of the thread group size.</param>
            <param name="threadGroupSizeZ">The Z dimension of the thread group size.</param>
            <param name="specializations">An array of <see cref="T:Veldrid.SpecializationConstant"/> used to override specialization
            constants in the created <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes a single ID-value pair, which
            will be matched with the constants specified in the <see cref="T:Veldrid.Shader"/>.</param>
        </member>
        <member name="M:Veldrid.ComputePipelineDescription.Equals(Veldrid.ComputePipelineDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ComputePipelineDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.DepthStencilStateDescription">
            <summary>
            A <see cref="T:Veldrid.Pipeline"/> component describing the properties of the depth stencil state.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthTestEnabled">
            <summary>
            Controls whether depth testing is enabled.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthWriteEnabled">
            <summary>
            Controls whether new depth values are written to the depth buffer.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthComparison">
            <summary>
            The <see cref="T:Veldrid.ComparisonKind"/> used when considering new depth values.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilTestEnabled">
            <summary>
            Controls whether the stencil test is enabled.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilFront">
            <summary>
            Controls how stencil tests are handled for pixels whose surface faces towards the camera.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilBack">
            <summary>
            Controls how stencil tests are handled for pixels whose surface faces away from the camera.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilReadMask">
            <summary>
            Controls the portion of the stencil buffer used for reading.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            Controls the portion of the stencil buffer used for writing.
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.StencilReference">
            <summary>
            The reference value to use when doing a stencil test.
            </summary>
        </member>
        <member name="M:Veldrid.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean,Veldrid.ComparisonKind)">
            <summary>
            Constructs a new <see cref="T:Veldrid.DepthStencilStateDescription"/>. This describes a depth-stencil state with no stencil
            testing enabled.
            </summary>
            <param name="depthTestEnabled">Controls whether depth testing is enabled.</param>
            <param name="depthWriteEnabled">Controls whether new depth values are written to the depth buffer.</param>
            <param name="comparisonKind">The <see cref="T:Veldrid.ComparisonKind"/> used when considering new depth values.</param>
        </member>
        <member name="M:Veldrid.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean,Veldrid.ComparisonKind,System.Boolean,Veldrid.StencilBehaviorDescription,Veldrid.StencilBehaviorDescription,System.Byte,System.Byte,System.UInt32)">
            <summary>
            Constructs a new <see cref="T:Veldrid.DepthStencilStateDescription"/>. This describes a depth-stencil state with no stencil
            testing enabled.
            </summary>
            <param name="depthTestEnabled">Controls whether depth testing is enabled.</param>
            <param name="depthWriteEnabled">Controls whether new depth values are written to the depth buffer.</param>
            <param name="comparisonKind">The <see cref="T:Veldrid.ComparisonKind"/> used when considering new depth values.</param>
            <param name="stencilTestEnabled">Controls whether the stencil test is enabled.</param>
            <param name="stencilFront">Controls how stencil tests are handled for pixels whose surface faces towards the camera.</param>
            <param name="stencilBack">Controls how stencil tests are handled for pixels whose surface faces away from the camera.</param>
            <param name="stencilReadMask">Controls the portion of the stencil buffer used for reading.</param>
            <param name="stencilWriteMask">Controls the portion of the stencil buffer used for writing.</param>
            <param name="stencilReference">The reference value to use when doing a stencil test.</param>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthOnlyLessEqual">
            <summary>
            Describes a depth-only depth stencil state which uses a <see cref="F:Veldrid.ComparisonKind.LessEqual"/> comparison.
            The stencil test is disabled.
            Settings:
                DepthTestEnabled = true
                DepthWriteEnabled = true
                ComparisonKind = DepthComparisonKind.LessEqual
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthOnlyLessEqualRead">
            <summary>
            Describes a depth-only depth stencil state which uses a <see cref="F:Veldrid.ComparisonKind.LessEqual"/> comparison, and disables writing to the depth buffer.
            The stencil test is disabled.
            Settings:
                DepthTestEnabled = true
                DepthWriteEnabled = false
                ComparisonKind = DepthComparisonKind.LessEqual
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthOnlyGreaterEqual">
            <summary>
            Describes a depth-only depth stencil state which uses a <see cref="F:Veldrid.ComparisonKind.GreaterEqual"/> comparison.
            The stencil test is disabled.
            Settings:
                DepthTestEnabled = true
                DepthWriteEnabled = true
                ComparisonKind = DepthComparisonKind.GreaterEqual
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.DepthOnlyGreaterEqualRead">
            <summary>
            Describes a depth-only depth stencil state which uses a <see cref="F:Veldrid.ComparisonKind.GreaterEqual"/> comparison, and
            disables writing to the depth buffer. The stencil test is disabled.
            Settings:
                DepthTestEnabled = true
                DepthWriteEnabled = false
                ComparisonKind = DepthComparisonKind.GreaterEqual
            </summary>
        </member>
        <member name="F:Veldrid.DepthStencilStateDescription.Disabled">
            <summary>
            Describes a depth-only depth stencil state in which depth testing and writing is disabled.
            The stencil test is disabled.
            Settings:
                DepthTestEnabled = false
                DepthWriteEnabled = false
                ComparisonKind = DepthComparisonKind.LessEqual
            </summary>
        </member>
        <member name="M:Veldrid.DepthStencilStateDescription.Equals(Veldrid.DepthStencilStateDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.DepthStencilStateDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.DeviceBufferRange">
            <summary>
            A <see cref="T:Veldrid.BindableResource"/> that represents a section of a <see cref="T:Veldrid.DeviceBuffer"/>. This can be used in place of
            a <see cref="T:Veldrid.DeviceBuffer"/> when creating a <see cref="T:Veldrid.ResourceSet"/> to make only a subset of the Buffer available to
            shaders.
            </summary>
        </member>
        <member name="F:Veldrid.DeviceBufferRange.Buffer">
            <summary>
            The underlying <see cref="T:Veldrid.DeviceBuffer"/> that this range refers to.
            </summary>
        </member>
        <member name="F:Veldrid.DeviceBufferRange.Offset">
            <summary>
            The offset, in bytes, from the beginning of the buffer that this range starts at.
            </summary>
        </member>
        <member name="F:Veldrid.DeviceBufferRange.SizeInBytes">
            <summary>
            The total number of bytes that this range encompasses.
            </summary>
        </member>
        <member name="M:Veldrid.DeviceBufferRange.#ctor(Veldrid.DeviceBuffer,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new <see cref="T:Veldrid.DeviceBufferRange"/>.
            </summary>
            <param name="buffer">The underlying <see cref="T:Veldrid.DeviceBuffer"/> that this range will refer to.</param>
            <param name="offset">The offset, in bytes, from the beginning of the buffer that this range will start at.</param>
            <param name="sizeInBytes">The total number of bytes that this range will encompass.</param>
        </member>
        <member name="M:Veldrid.DeviceBufferRange.Equals(Veldrid.DeviceBufferRange)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.DeviceBufferRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.DeviceResource">
            <summary>
            A resource owned by a <see cref="T:Veldrid.GraphicsDevice"/>, which can be given a string identifier for debugging and
            informational purposes.
            </summary>
        </member>
        <member name="P:Veldrid.DeviceResource.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="T:Veldrid.FaceCullMode">
            <summary>
            Indicates which face will be culled.
            </summary>
        </member>
        <member name="F:Veldrid.FaceCullMode.Back">
            <summary>
            The back face.
            </summary>
        </member>
        <member name="F:Veldrid.FaceCullMode.Front">
            <summary>
            The front face.
            </summary>
        </member>
        <member name="F:Veldrid.FaceCullMode.None">
            <summary>
            No face culling.
            </summary>
        </member>
        <member name="T:Veldrid.Fence">
            <summary>
            A synchronization primitive which allows the GPU to communicate when submitted work items have finished executing.
            </summary>
        </member>
        <member name="P:Veldrid.Fence.Signaled">
            <summary>
            Gets a value indicating whether the Fence is currently signaled. A Fence is signaled after a CommandList finishes
            execution after it was submitted with a Fence instance.
            </summary>
        </member>
        <member name="M:Veldrid.Fence.Reset">
            <summary>
            Sets this instance to the unsignaled state.
            </summary>
        </member>
        <member name="P:Veldrid.Fence.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Fence.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.Framebuffer">
            <summary>
            A device resource used to control which color and depth textures are rendered to.
            See <see cref="T:Veldrid.FramebufferDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.DepthTarget">
            <summary>
            Gets the depth attachment associated with this instance. May be null if no depth texture is used.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.ColorTargets">
            <summary>
            Gets the collection of color attachments associated with this instance. May be empty.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.OutputDescription">
            <summary>
            Gets an <see cref="T:Veldrid.OutputDescription"/> which describes the number and formats of the depth and color targets
            in this instance.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.Width">
            <summary>
            Gets the width of the <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.Height">
            <summary>
            Gets the height of the <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Framebuffer.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Framebuffer.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.FramebufferAttachment">
            <summary>
            Represents a single output of a <see cref="T:Veldrid.Framebuffer"/>. May be a color or depth attachment.
            </summary>
        </member>
        <member name="P:Veldrid.FramebufferAttachment.Target">
            <summary>
            The target <see cref="T:Veldrid.Texture"/> which will be rendered to.
            </summary>
        </member>
        <member name="P:Veldrid.FramebufferAttachment.ArrayLayer">
            <summary>
            The target array layer.
            </summary>
        </member>
        <member name="P:Veldrid.FramebufferAttachment.MipLevel">
            <summary>
            The target mip level.
            </summary>
        </member>
        <member name="M:Veldrid.FramebufferAttachment.#ctor(Veldrid.Texture,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachment.
            </summary>
            <param name="target">The target <see cref="T:Veldrid.Texture"/> which will be rendered to.</param>
            <param name="arrayLayer">The target array layer.</param>
        </member>
        <member name="M:Veldrid.FramebufferAttachment.#ctor(Veldrid.Texture,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachment.
            </summary>
            <param name="target">The target <see cref="T:Veldrid.Texture"/> which will be rendered to.</param>
            <param name="arrayLayer">The target array layer.</param>
            <param name="mipLevel">The target mip level.</param>
        </member>
        <member name="T:Veldrid.FramebufferAttachmentDescription">
            <summary>
            Describes a single attachment (color or depth) for a <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.FramebufferAttachmentDescription.Target">
            <summary>
            The target texture to render into. For color attachments, this resource must have been created with the
            <see cref="F:Veldrid.TextureUsage.RenderTarget"/> flag. For depth attachments, this resource must have been created with the
            <see cref="F:Veldrid.TextureUsage.DepthStencil"/> flag.
            </summary>
        </member>
        <member name="F:Veldrid.FramebufferAttachmentDescription.ArrayLayer">
            <summary>
            The array layer to render to. This value must be less than <see cref="P:Veldrid.Texture.ArrayLayers"/> in the target
            <see cref="T:Veldrid.Texture"/>.
            </summary>
        </member>
        <member name="F:Veldrid.FramebufferAttachmentDescription.MipLevel">
            <summary>
            The mip level to render to. This value must be less than <see cref="P:Veldrid.Texture.MipLevels"/> in the target
            <see cref="T:Veldrid.Texture"/>.
            </summary>
        </member>
        <member name="M:Veldrid.FramebufferAttachmentDescription.#ctor(Veldrid.Texture,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachmentDescription.
            </summary>
            <param name="target">The target texture to render into. For color attachments, this resource must have been created
            with the <see cref="F:Veldrid.TextureUsage.RenderTarget"/> flag. For depth attachments, this resource must have been created
            with the <see cref="F:Veldrid.TextureUsage.DepthStencil"/> flag.</param>
            <param name="arrayLayer">The array layer to render to. This value must be less than <see cref="P:Veldrid.Texture.ArrayLayers"/>
            in the target <see cref="T:Veldrid.Texture"/>.</param>
        </member>
        <member name="M:Veldrid.FramebufferAttachmentDescription.#ctor(Veldrid.Texture,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new FramebufferAttachmentDescription.
            </summary>
            <param name="target">The target texture to render into. For color attachments, this resource must have been created
            with the <see cref="F:Veldrid.TextureUsage.RenderTarget"/> flag. For depth attachments, this resource must have been created
            with the <see cref="F:Veldrid.TextureUsage.DepthStencil"/> flag.</param>
            <param name="arrayLayer">The array layer to render to. This value must be less than <see cref="P:Veldrid.Texture.ArrayLayers"/>
            in the target <see cref="T:Veldrid.Texture"/>.</param>
            <param name="mipLevel">The mip level to render to. This value must be less than <see cref="P:Veldrid.Texture.MipLevels"/> in
            the target <see cref="T:Veldrid.Texture"/>.</param>
        </member>
        <member name="M:Veldrid.FramebufferAttachmentDescription.Equals(Veldrid.FramebufferAttachmentDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.FramebufferAttachmentDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.FramebufferDescription">
            <summary>
            Describes a <see cref="T:Veldrid.Framebuffer"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.FramebufferDescription.DepthTarget">
            <summary>
            The depth texture, which must have been created with <see cref="F:Veldrid.TextureUsage.DepthStencil"/> usage flags.
            May be null.
            </summary>
        </member>
        <member name="F:Veldrid.FramebufferDescription.ColorTargets">
            <summary>
            An array of color textures, all of which must have been created with <see cref="F:Veldrid.TextureUsage.RenderTarget"/>
            usage flags. May be null or empty.
            </summary>
        </member>
        <member name="M:Veldrid.FramebufferDescription.#ctor(Veldrid.Texture,Veldrid.Texture[])">
            <summary>
            Constructs a new <see cref="T:Veldrid.FramebufferDescription"/>.
            </summary>
            <param name="depthTarget">The depth texture, which must have been created with
            <see cref="F:Veldrid.TextureUsage.DepthStencil"/> usage flags. May be null.</param>
            <param name="colorTargets">An array of color textures, all of which must have been created with
            <see cref="F:Veldrid.TextureUsage.RenderTarget"/> usage flags. May be null or empty.</param>
        </member>
        <member name="M:Veldrid.FramebufferDescription.#ctor(System.Nullable{Veldrid.FramebufferAttachmentDescription},Veldrid.FramebufferAttachmentDescription[])">
            <summary>
            Constructs a new <see cref="T:Veldrid.FramebufferDescription"/>.
            </summary>
            <param name="depthTarget">A description of the depth attachment. May be null if no depth attachment will be used.</param>
            <param name="colorTargets">An array of descriptions of color attachments. May be empty if no color attachments will
            be used.</param>
        </member>
        <member name="M:Veldrid.FramebufferDescription.Equals(Veldrid.FramebufferDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.FramebufferDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.FrontFace">
            <summary>
            The winding order used to determine the front face of a primitive.
            </summary>
        </member>
        <member name="F:Veldrid.FrontFace.Clockwise">
            <summary>
            Clockwise winding order.
            </summary>
        </member>
        <member name="F:Veldrid.FrontFace.CounterClockwise">
            <summary>
            Counter-clockwise winding order.
            </summary>
        </member>
        <member name="T:Veldrid.GraphicsBackend">
            <summary>
            The specific graphics API used by the <see cref="T:Veldrid.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsBackend.Direct3D11">
            <summary>
            Direct3D 11.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsBackend.Vulkan">
            <summary>
            Vulkan.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsBackend.OpenGL">
            <summary>
            OpenGL.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsBackend.Metal">
            <summary>
            Metal.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsBackend.OpenGLES">
            <summary>
            OpenGL ES.
            </summary>
        </member>
        <member name="T:Veldrid.GraphicsDevice">
            <summary>
            Represents an abstract graphics device, capable of creating device resources and executing commands.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.BackendType">
            <summary>
            Gets a value identifying the specific graphics API used by this instance.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.IsUvOriginTopLeft">
            <summary>
            Gets a value identifying whether texture coordinates begin in the top left corner of a Texture.
            If true, (0, 0) refers to the top-left texel of a Texture. If false, (0, 0) refers to the bottom-left 
            texel of a Texture. This property is useful for determining how the output of a Framebuffer should be sampled.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.IsDepthRangeZeroToOne">
            <summary>
            Gets a value indicating whether this device's depth values range from 0 to 1.
            If false, depth values instead range from -1 to 1.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.IsClipSpaceYInverted">
            <summary>
            Gets a value indicating whether this device's clip space Y values increase from top (-1) to bottom (1).
            If false, clip space Y values instead increase from bottom (-1) to top (1).
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.ResourceFactory">
            <summary>
            Gets the <see cref="P:Veldrid.GraphicsDevice.ResourceFactory"/> controlled by this instance.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.MainSwapchain">
            <summary>
            Retrieves the main Swapchain for this device. This property is only valid if the device was created with a main
            Swapchain, and will return null otherwise.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.Features">
            <summary>
            Gets a <see cref="T:Veldrid.GraphicsDeviceFeatures"/> which enumerates the optional features supported by this instance.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.SyncToVerticalBlank">
            <summary>
            Gets or sets whether the main Swapchain's <see cref="M:Veldrid.GraphicsDevice.SwapBuffers"/> should be synchronized to the window system's
            vertical refresh rate.
            This is equivalent to <see cref="P:Veldrid.GraphicsDevice.MainSwapchain"/>.<see cref="P:Veldrid.Swapchain.SyncToVerticalBlank"/>.
            This property cannot be set if this GraphicsDevice was created without a main Swapchain.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.UniformBufferMinOffsetAlignment">
            <summary>
            The required alignment, in bytes, for uniform buffer offsets. <see cref="F:Veldrid.DeviceBufferRange.Offset"/> must be a
            multiple of this value. When binding a <see cref="T:Veldrid.ResourceSet"/> to a <see cref="T:Veldrid.CommandList"/> with an overload
            accepting dynamic offsets, each offset must be a multiple of this value.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.StructuredBufferMinOffsetAlignment">
            <summary>
            The required alignment, in bytes, for structured buffer offsets. <see cref="F:Veldrid.DeviceBufferRange.Offset"/> must be a
            multiple of this value. When binding a <see cref="T:Veldrid.ResourceSet"/> to a <see cref="T:Veldrid.CommandList"/> with an overload
            accepting dynamic offsets, each offset must be a multiple of this value.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.SubmitCommands(Veldrid.CommandList)">
            <summary>
            Submits the given <see cref="T:Veldrid.CommandList"/> for execution by this device.
            Commands submitted in this way may not be completed when this method returns.
            Use <see cref="M:Veldrid.GraphicsDevice.WaitForIdle"/> to wait for all submitted commands to complete.
            <see cref="M:Veldrid.CommandList.End"/> must have been called on <paramref name="commandList"/> for this method to succeed.
            </summary>
            <param name="commandList">The completed <see cref="T:Veldrid.CommandList"/> to execute. <see cref="M:Veldrid.CommandList.End"/> must have
            been previously called on this object.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.SubmitCommands(Veldrid.CommandList,Veldrid.Fence)">
            <summary>
            Submits the given <see cref="T:Veldrid.CommandList"/> for execution by this device.
            Commands submitted in this way may not be completed when this method returns.
            Use <see cref="M:Veldrid.GraphicsDevice.WaitForIdle"/> to wait for all submitted commands to complete.
            <see cref="M:Veldrid.CommandList.End"/> must have been called on <paramref name="commandList"/> for this method to succeed.
            </summary>
            <param name="commandList">The completed <see cref="T:Veldrid.CommandList"/> to execute. <see cref="M:Veldrid.CommandList.End"/> must have
            been previously called on this object.</param>
            <param name="fence">A <see cref="T:Veldrid.Fence"/> which will become signaled after this submission fully completes
            execution.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFence(Veldrid.Fence)">
            <summary>
            Blocks the calling thread until the given <see cref="T:Veldrid.Fence"/> becomes signaled.
            </summary>
            <param name="fence">The <see cref="T:Veldrid.Fence"/> instance to wait on.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFence(Veldrid.Fence,System.TimeSpan)">
            <summary>
            Blocks the calling thread until the given <see cref="T:Veldrid.Fence"/> becomes signaled, or until a time greater than the
            given TimeSpan has elapsed.
            </summary>
            <param name="fence">The <see cref="T:Veldrid.Fence"/> instance to wait on.</param>
            <param name="timeout">A TimeSpan indicating the maximum time to wait on the Fence.</param>
            <returns>True if the Fence was signaled. False if the timeout was reached instead.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFence(Veldrid.Fence,System.UInt64)">
            <summary>
            Blocks the calling thread until the given <see cref="T:Veldrid.Fence"/> becomes signaled, or until a time greater than the
            given TimeSpan has elapsed.
            </summary>
            <param name="fence">The <see cref="T:Veldrid.Fence"/> instance to wait on.</param>
            <param name="nanosecondTimeout">A value in nanoseconds, indicating the maximum time to wait on the Fence.</param>
            <returns>True if the Fence was signaled. False if the timeout was reached instead.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFences(Veldrid.Fence[],System.Boolean)">
            <summary>
            Blocks the calling thread until one or all of the given <see cref="T:Veldrid.Fence"/> instances have become signaled.
            </summary>
            <param name="fences">An array of <see cref="T:Veldrid.Fence"/> objects to wait on.</param>
            <param name="waitAll">If true, then this method blocks until all of the given Fences become signaled.
            If false, then this method only waits until one of the Fences become signaled.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFences(Veldrid.Fence[],System.Boolean,System.TimeSpan)">
            <summary>
            Blocks the calling thread until one or all of the given <see cref="T:Veldrid.Fence"/> instances have become signaled,
            or until the given timeout has been reached.
            </summary>
            <param name="fences">An array of <see cref="T:Veldrid.Fence"/> objects to wait on.</param>
            <param name="waitAll">If true, then this method blocks until all of the given Fences become signaled.
            If false, then this method only waits until one of the Fences become signaled.</param>
            <param name="timeout">A TimeSpan indicating the maximum time to wait on the Fences.</param>
            <returns>True if the Fence was signaled. False if the timeout was reached instead.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForFences(Veldrid.Fence[],System.Boolean,System.UInt64)">
            <summary>
            Blocks the calling thread until one or all of the given <see cref="T:Veldrid.Fence"/> instances have become signaled,
            or until the given timeout has been reached.
            </summary>
            <param name="fences">An array of <see cref="T:Veldrid.Fence"/> objects to wait on.</param>
            <param name="waitAll">If true, then this method blocks until all of the given Fences become signaled.
            If false, then this method only waits until one of the Fences become signaled.</param>
            <param name="nanosecondTimeout">A value in nanoseconds, indicating the maximum time to wait on the Fence.</param>
            <returns>True if the Fence was signaled. False if the timeout was reached instead.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.ResetFence(Veldrid.Fence)">
            <summary>
            Resets the given <see cref="T:Veldrid.Fence"/> to the unsignaled state.
            </summary>
            <param name="fence">The <see cref="T:Veldrid.Fence"/> instance to reset.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.SwapBuffers">
            <summary>
            Swaps the buffers of the main swapchain and presents the rendered image to the screen.
            This is equivalent to passing <see cref="P:Veldrid.GraphicsDevice.MainSwapchain"/> to <see cref="M:Veldrid.GraphicsDevice.SwapBuffers(Veldrid.Swapchain)"/>.
            This method can only be called if this GraphicsDevice was created with a main Swapchain.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.SwapBuffers(Veldrid.Swapchain)">
            <summary>
            Swaps the buffers of the given swapchain.
            </summary>
            <param name="swapchain">The <see cref="T:Veldrid.Swapchain"/> to swap and present.</param>
        </member>
        <member name="P:Veldrid.GraphicsDevice.SwapchainFramebuffer">
            <summary>
            Gets a <see cref="T:Veldrid.Framebuffer"/> object representing the render targets of the main swapchain.
            This is equivalent to <see cref="P:Veldrid.GraphicsDevice.MainSwapchain"/>.<see cref="P:Veldrid.Swapchain.Framebuffer"/>.
            If this GraphicsDevice was created without a main Swapchain, then this returns null.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.ResizeMainWindow(System.UInt32,System.UInt32)">
            <summary>
            Notifies this instance that the main window has been resized. This causes the <see cref="P:Veldrid.GraphicsDevice.SwapchainFramebuffer"/> to
            be appropriately resized and recreated.
            This is equivalent to calling <see cref="P:Veldrid.GraphicsDevice.MainSwapchain"/>.<see cref="M:Veldrid.Swapchain.Resize(System.UInt32,System.UInt32)"/>.
            This method can only be called if this GraphicsDevice was created with a main Swapchain.
            </summary>
            <param name="width">The new width of the main window.</param>
            <param name="height">The new height of the main window.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.WaitForIdle">
            <summary>
            A blocking method that returns when all submitted <see cref="T:Veldrid.CommandList"/> objects have fully completed.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetSampleCountLimit(Veldrid.PixelFormat,System.Boolean)">
            <summary>
            Gets the maximum sample count supported by the given <see cref="T:Veldrid.PixelFormat"/>.
            </summary>
            <param name="format">The format to query.</param>
            <param name="depthFormat">Whether the format will be used in a depth texture.</param>
            <returns>A <see cref="T:Veldrid.TextureSampleCount"/> value representing the maximum count that a <see cref="T:Veldrid.Texture"/> of that
            format can be created with.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Map(Veldrid.MappableResource,Veldrid.MapMode)">
            <summary>
            Maps a <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> into a CPU-accessible data region. For Texture resources, this
            overload maps the first subresource.
            </summary>
            <param name="resource">The <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> resource to map.</param>
            <param name="mode">The <see cref="T:Veldrid.MapMode"/> to use.</param>
            <returns>A <see cref="T:Veldrid.MappedResource"/> structure describing the mapped data region.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Map(Veldrid.MappableResource,Veldrid.MapMode,System.UInt32)">
            <summary>
            Maps a <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> into a CPU-accessible data region.
            </summary>
            <param name="resource">The <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> resource to map.</param>
            <param name="mode">The <see cref="T:Veldrid.MapMode"/> to use.</param>
            <param name="subresource">The subresource to map. Subresources are indexed first by mip slice, then by array layer.
            For <see cref="T:Veldrid.DeviceBuffer"/> resources, this parameter must be 0.</param>
            <returns>A <see cref="T:Veldrid.MappedResource"/> structure describing the mapped data region.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.MapCore(Veldrid.MappableResource,Veldrid.MapMode,System.UInt32)">
            <summary>
            </summary>
            <param name="resource"></param>
            <param name="mode"></param>
            <param name="subresource"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Map``1(Veldrid.MappableResource,Veldrid.MapMode)">
            <summary>
            Maps a <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> into a CPU-accessible data region, and returns a structured
            view over that region. For Texture resources, this overload maps the first subresource.
            </summary>
            <param name="resource">The <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> resource to map.</param>
            <param name="mode">The <see cref="T:Veldrid.MapMode"/> to use.</param>
            <typeparam name="T">The blittable value type which mapped data is viewed as.</typeparam>
            <returns>A <see cref="T:Veldrid.MappedResource"/> structure describing the mapped data region.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Map``1(Veldrid.MappableResource,Veldrid.MapMode,System.UInt32)">
            <summary>
            Maps a <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> into a CPU-accessible data region, and returns a structured
            view over that region.
            </summary>
            <param name="resource">The <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/> resource to map.</param>
            <param name="mode">The <see cref="T:Veldrid.MapMode"/> to use.</param>
            <param name="subresource">The subresource to map. Subresources are indexed first by mip slice, then by array layer.</param>
            <typeparam name="T">The blittable value type which mapped data is viewed as.</typeparam>
            <returns>A <see cref="T:Veldrid.MappedResource"/> structure describing the mapped data region.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Unmap(Veldrid.MappableResource)">
            <summary>
            Invalidates a previously-mapped data region for the given <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/>.
            For <see cref="T:Veldrid.Texture"/> resources, this unmaps the first subresource.
            </summary>
            <param name="resource">The resource to unmap.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Unmap(Veldrid.MappableResource,System.UInt32)">
            <summary>
            Invalidates a previously-mapped data region for the given <see cref="T:Veldrid.DeviceBuffer"/> or <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="resource">The resource to unmap.</param>
            <param name="subresource">The subresource to unmap. Subresources are indexed first by mip slice, then by array layer.
            For <see cref="T:Veldrid.DeviceBuffer"/> resources, this parameter must be 0.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UnmapCore(Veldrid.MappableResource,System.UInt32)">
            <summary>
            </summary>
            <param name="resource"></param>
            <param name="subresource"></param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateTexture(Veldrid.Texture,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Updates a portion of a <see cref="T:Veldrid.Texture"/> resource with new data.
            </summary>
            <param name="texture">The resource to update.</param>
            <param name="source">A pointer to the start of the data to upload. This must point to tightly-packed pixel data for
            the region specified.</param>
            <param name="sizeInBytes">The number of bytes to upload. This value must match the total size of the texture region
            specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Veldrid.Texture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Veldrid.Texture"/>.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateTexture``1(Veldrid.Texture,``0[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Updates a portion of a <see cref="T:Veldrid.Texture"/> resource with new data contained in an array
            </summary>
            <param name="texture">The resource to update.</param>
            <param name="source">An array containing the data to upload. This must contain tightly-packed pixel data for the
            region specified.</param>
            <param name="x">The minimum X value of the updated region.</param>
            <param name="y">The minimum Y value of the updated region.</param>
            <param name="z">The minimum Z value of the updated region.</param>
            <param name="width">The width of the updated region, in texels.</param>
            <param name="height">The height of the updated region, in texels.</param>
            <param name="depth">The depth of the updated region, in texels.</param>
            <param name="mipLevel">The mipmap level to update. Must be less than the total number of mipmaps contained in the
            <see cref="T:Veldrid.Texture"/>.</param>
            <param name="arrayLayer">The array layer to update. Must be less than the total array layer count contained in the
            <see cref="T:Veldrid.Texture"/>.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/> storage, at
            which new data will be uploaded.</param>
            <param name="source">The value to upload.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0@)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A reference to the single value to upload.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0@,System.UInt32)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A reference to the first of a series of values to upload.</param>
            <param name="sizeInBytes">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateBuffer``1(Veldrid.DeviceBuffer,System.UInt32,``0[])">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            This function must be used with a blittable value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of data to upload.</typeparam>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">An array containing the data to upload.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.UpdateBuffer(Veldrid.DeviceBuffer,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            Updates a <see cref="T:Veldrid.DeviceBuffer"/> region with new data.
            </summary>
            <param name="buffer">The resource to update.</param>
            <param name="bufferOffsetInBytes">An offset, in bytes, from the beginning of the <see cref="T:Veldrid.DeviceBuffer"/>'s storage, at
            which new data will be uploaded.</param>
            <param name="source">A pointer to the start of the data to upload.</param>
            <param name="sizeInBytes">The total size of the uploaded data, in bytes.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetPixelFormatSupport(Veldrid.PixelFormat,Veldrid.TextureType,Veldrid.TextureUsage)">
            <summary>
            Gets whether or not the given <see cref="T:Veldrid.PixelFormat"/>, <see cref="T:Veldrid.TextureType"/>, and <see cref="T:Veldrid.TextureUsage"/>
            combination is supported by this instance.
            </summary>
            <param name="format">The PixelFormat to query.</param>
            <param name="type">The TextureType to query.</param>
            <param name="usage">The TextureUsage to query.</param>
            <returns>True if the given combination is supported; false otherwise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetPixelFormatSupport(Veldrid.PixelFormat,Veldrid.TextureType,Veldrid.TextureUsage,Veldrid.PixelFormatProperties@)">
            <summary>
            Gets whether or not the given <see cref="T:Veldrid.PixelFormat"/>, <see cref="T:Veldrid.TextureType"/>, and <see cref="T:Veldrid.TextureUsage"/>
            combination is supported by this instance, and also gets the device-specific properties supported by this instance.
            </summary>
            <param name="format">The PixelFormat to query.</param>
            <param name="type">The TextureType to query.</param>
            <param name="usage">The TextureUsage to query.</param>
            <param name="properties">If the combination is supported, then this parameter describes the limits of a Texture
            created using the given combination of attributes.</param>
            <returns>True if the given combination is supported; false otherwise. If the combination is supported,
            then <paramref name="properties"/> contains the limits supported by this instance.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.DisposeWhenIdle(System.IDisposable)">
            <summary>
            Adds the given object to a deferred disposal list, which will be processed when this GraphicsDevice becomes idle.
            This method can be used to safely dispose a device resource which may be in use at the time this method is called,
            but which will no longer be in use when the device is idle.
            </summary>
            <param name="disposable">An object to dispose when this instance becomes idle.</param>
        </member>
        <member name="M:Veldrid.GraphicsDevice.PlatformDispose">
            <summary>
            Performs API-specific disposal of resources controlled by this instance.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.PostDeviceCreated">
            <summary>
            Creates and caches common device resources after device creation completes.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.PointSampler">
            <summary>
            Gets a simple point-filtered <see cref="T:Veldrid.Sampler"/> object owned by this instance.
            This object is created with <see cref="F:Veldrid.SamplerDescription.Point"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.LinearSampler">
            <summary>
            Gets a simple linear-filtered <see cref="T:Veldrid.Sampler"/> object owned by this instance.
            This object is created with <see cref="F:Veldrid.SamplerDescription.Linear"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDevice.Aniso4xSampler">
            <summary>
            Gets a simple 4x anisotropic-filtered <see cref="T:Veldrid.Sampler"/> object owned by this instance.
            This object is created with <see cref="F:Veldrid.SamplerDescription.Aniso4x"/>.
            This property can only be used when <see cref="P:Veldrid.GraphicsDeviceFeatures.SamplerAnisotropy"/> is supported.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.Dispose">
            <summary>
            Frees unmanaged resources controlled by this device.
            All created child resources must be Disposed prior to calling this method.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetD3D11Info(Veldrid.BackendInfoD3D11@)">
            <summary>
            Tries to get a <see cref="T:Veldrid.BackendInfoD3D11"/> for this instance. This method will only succeed if this is a D3D11
            GraphicsDevice.
            </summary>
            <param name="info">If successful, this will contain the <see cref="T:Veldrid.BackendInfoD3D11"/> for this instance.</param>
            <returns>True if this is a D3D11 GraphicsDevice and the operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetD3D11Info">
            <summary>
            Gets a <see cref="T:Veldrid.BackendInfoD3D11"/> for this instance. This method will only succeed if this is a D3D11
            GraphicsDevice. Otherwise, this method will throw an exception.
            </summary>
            <returns>The <see cref="T:Veldrid.BackendInfoD3D11"/> for this instance.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetVulkanInfo(Veldrid.BackendInfoVulkan@)">
            <summary>
            Tries to get a <see cref="T:Veldrid.BackendInfoVulkan"/> for this instance. This method will only succeed if this is a Vulkan
            GraphicsDevice.
            </summary>
            <param name="info">If successful, this will contain the <see cref="T:Veldrid.BackendInfoVulkan"/> for this instance.</param>
            <returns>True if this is a Vulkan GraphicsDevice and the operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetVulkanInfo">
            <summary>
            Gets a <see cref="T:Veldrid.BackendInfoVulkan"/> for this instance. This method will only succeed if this is a Vulkan
            GraphicsDevice. Otherwise, this method will throw an exception.
            </summary>
            <returns>The <see cref="T:Veldrid.BackendInfoVulkan"/> for this instance.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetOpenGLInfo(Veldrid.BackendInfoOpenGL@)">
            <summary>
            Tries to get a <see cref="T:Veldrid.BackendInfoOpenGL"/> for this instance. This method will only succeed if this is an OpenGL
            GraphicsDevice.
            </summary>
            <param name="info">If successful, this will contain the <see cref="T:Veldrid.BackendInfoOpenGL"/> for this instance.</param>
            <returns>True if this is an OpenGL GraphicsDevice and the operation was successful. False otherwise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.GetOpenGLInfo">
            <summary>
            Gets a <see cref="T:Veldrid.BackendInfoOpenGL"/> for this instance. This method will only succeed if this is an OpenGL
            GraphicsDevice. Otherwise, this method will throw an exception.
            </summary>
            <returns>The <see cref="T:Veldrid.BackendInfoOpenGL"/> for this instance.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.IsBackendSupported(Veldrid.GraphicsBackend)">
            <summary>
            Checks whether the given <see cref="T:Veldrid.GraphicsBackend"/> is supported on this system.
            </summary>
            <param name="backend">The GraphicsBackend to check.</param>
            <returns>True if the GraphicsBackend is supported; false otherwise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateD3D11(Veldrid.GraphicsDeviceOptions)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Direct3D 11.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Direct3D 11 API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateD3D11(Veldrid.GraphicsDeviceOptions,Veldrid.SwapchainDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Direct3D 11, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="swapchainDescription">A description of the main Swapchain to create.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Direct3D 11 API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateD3D11(Veldrid.GraphicsDeviceOptions,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Direct3D 11, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="hwnd">The Win32 window handle to render into.</param>
            <param name="width">The initial width of the window.</param>
            <param name="height">The initial height of the window.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Direct3D 11 API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateD3D11(Veldrid.GraphicsDeviceOptions,System.Object,System.Double,System.Double,System.Single)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Direct3D 11, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="swapChainPanel">A COM object which must implement the <see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/>
            or <see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/> interface. Generally, this should be a SwapChainPanel
            or SwapChainBackgroundPanel contained in your application window.</param>
            <param name="renderWidth">The renderable width of the swapchain panel.</param>
            <param name="renderHeight">The renderable height of the swapchain panel.</param>
            <param name="logicalDpi">The logical DPI of the swapchain panel.</param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateVulkan(Veldrid.GraphicsDeviceOptions)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Vulkan.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Vulkan API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateVulkan(Veldrid.GraphicsDeviceOptions,Veldrid.VulkanDeviceOptions)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Vulkan.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="vkOptions">The Vulkan-specific options used to create the device.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Vulkan API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateVulkan(Veldrid.GraphicsDeviceOptions,Veldrid.SwapchainDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Vulkan, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="swapchainDescription">A description of the main Swapchain to create.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Vulkan API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateVulkan(Veldrid.GraphicsDeviceOptions,Veldrid.SwapchainDescription,Veldrid.VulkanDeviceOptions)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Vulkan, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="vkOptions">The Vulkan-specific options used to create the device.</param>
            <param name="swapchainDescription">A description of the main Swapchain to create.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Vulkan API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateVulkan(Veldrid.GraphicsDeviceOptions,Veldrid.Vk.VkSurfaceSource,System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Vulkan, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="surfaceSource">The source from which a Vulkan surface can be created.</param>
            <param name="width">The initial width of the window.</param>
            <param name="height">The initial height of the window.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Vulkan API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateOpenGL(Veldrid.GraphicsDeviceOptions,Veldrid.OpenGL.OpenGLPlatformInfo,System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using OpenGL or OpenGL ES, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="platformInfo">An <see cref="T:Veldrid.OpenGL.OpenGLPlatformInfo"/> object encapsulating necessary OpenGL context
            information.</param>
            <param name="width">The initial width of the window.</param>
            <param name="height">The initial height of the window.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the OpenGL or OpenGL ES API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateOpenGLES(Veldrid.GraphicsDeviceOptions,Veldrid.SwapchainDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using OpenGL ES, with a main Swapchain.
            This overload can only be used on iOS or Android to create a GraphicsDevice for an Android Surface or an iOS UIView.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="swapchainDescription">A description of the main Swapchain to create.
            The SwapchainSource must have been created from an Android Surface or an iOS UIView.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the OpenGL or OpenGL ES API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateMetal(Veldrid.GraphicsDeviceOptions)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Metal.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Metal API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateMetal(Veldrid.GraphicsDeviceOptions,Veldrid.SwapchainDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Metal, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="swapchainDescription">A description of the main Swapchain to create.</param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Metal API.</returns>
        </member>
        <member name="M:Veldrid.GraphicsDevice.CreateMetal(Veldrid.GraphicsDeviceOptions,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Veldrid.GraphicsDevice"/> using Metal, with a main Swapchain.
            </summary>
            <param name="options">Describes several common properties of the GraphicsDevice.</param>
            <param name="nsWindow">A pointer to an NSWindow object, which will be used to create the Metal device's swapchain.
            </param>
            <returns>A new <see cref="T:Veldrid.GraphicsDevice"/> using the Metal API.</returns>
        </member>
        <member name="T:Veldrid.GraphicsDeviceFeatures">
            <summary>
            Enumerates the optional features supported by a given <see cref="T:Veldrid.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.ComputeShader">
            <summary>
            Indicates whether Compute Shaders can be used.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.GeometryShader">
            <summary>
            Indicates whether Geometry Shaders can be used.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.TessellationShaders">
            <summary>
            Indicates whether Tessellation Shaders can be used.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.MultipleViewports">
            <summary>
            Indicates whether multiple independent viewports can be set simultaneously.
            If this is not supported, then only the first Viewport index will be used for all render outputs.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.SamplerLodBias">
            <summary>
            Indicates whether <see cref="F:Veldrid.SamplerDescription.LodBias"/> can be non-zero.
            If false, it is an error to attempt to use a non-zero bias value.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.DrawBaseVertex">
            <summary>
            Indicates whether a non-zero "vertexStart" value can be used in
            <see cref="M:Veldrid.CommandList.Draw(System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/> and
            <see cref="M:Veldrid.CommandList.DrawIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.DrawBaseInstance">
            <summary>
            Indicates whether a non-zero "instanceStart" value can be used in
            <see cref="M:Veldrid.CommandList.Draw(System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/> and
            <see cref="M:Veldrid.CommandList.DrawIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.DrawIndirect">
            <summary>
            Indicates whether indirect draw commands can be issued.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.DrawIndirectBaseInstance">
            <summary>
            Indicates whether indirect draw structures stored in an Indirect DeviceBuffer can contain
            a non-zero FirstInstance value.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.FillModeWireframe">
            <summary>
            Indicates whether <see cref="F:Veldrid.PolygonFillMode.Wireframe"/> is supported.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.SamplerAnisotropy">
            <summary>
            Indicates whether <see cref="F:Veldrid.SamplerFilter.Anisotropic"/> is supported.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.DepthClipDisable">
            <summary>
            Indicates whether <see cref="F:Veldrid.RasterizerStateDescription.DepthClipEnabled"/> can be set to false.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.Texture1D">
            <summary>
            Indicates whether a <see cref="T:Veldrid.Texture"/> can be created with <see cref="F:Veldrid.TextureType.Texture1D"/>.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.IndependentBlend">
            <summary>
            Indicates whether a <see cref="T:Veldrid.BlendStateDescription"/> can be used which has multiple different
            <see cref="T:Veldrid.BlendAttachmentDescription"/> values for each attachment. If false, all attachments must have the same
            blend state.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.StructuredBuffer">
            <summary>
            Indicates whether <see cref="F:Veldrid.BufferUsage.StructuredBufferReadOnly"/> and
            <see cref="F:Veldrid.BufferUsage.StructuredBufferReadWrite"/> can be used. If false, structured buffers cannot be created.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.SubsetTextureView">
            <summary>
            Indicates whether a <see cref="T:Veldrid.TextureView"/> can be created which does not view the full set of mip levels and array
            layers contained in its target Texture, or uses a different <see cref="T:Veldrid.PixelFormat"/> from the underlying Texture.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.CommandListDebugMarkers">
            <summary>
            Indicates whether <see cref="T:Veldrid.CommandList"/> instances created with this device support the
            <see cref="M:Veldrid.CommandList.PushDebugGroup(System.String)"/>, <see cref="M:Veldrid.CommandList.PopDebugGroup"/>, and
            <see cref="M:Veldrid.CommandList.InsertDebugMarker(System.String)"/> methods. If not, these methods will have no effect.
            </summary>
        </member>
        <member name="P:Veldrid.GraphicsDeviceFeatures.BufferRangeBinding">
            <summary>
            Indicates whether uniform and structured buffers can be bound with an offset and a size. If false, buffer resources
            must be bound with their full range.
            </summary>
        </member>
        <member name="T:Veldrid.GraphicsDeviceOptions">
            <summary>
            A structure describing several common properties of a GraphicsDevice.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.Debug">
            <summary>
            Indicates whether the GraphicsDevice will support debug features, provided they are supported by the host system.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.HasMainSwapchain">
            <summary>
            Indicates whether the Graphicsdevice will include a "main" Swapchain. If this value is true, then the GraphicsDevice
            must be created with one of the overloads that provides Swapchain source information.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.SwapchainDepthFormat">
            <summary>
            An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the swapchain. If this value is null, then
            no depth buffer will be present on the swapchain.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.SyncToVerticalBlank">
            <summary>
            Indicates whether the main Swapchain will be synchronized to the window system's vertical refresh rate.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.ResourceBindingModel">
            <summary>
            Specifies which model the rendering backend should use for binding resources. This can be overridden per-pipeline
            by specifying a value in <see cref="F:Veldrid.GraphicsPipelineDescription.ResourceBindingModel"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.PreferDepthRangeZeroToOne">
            <summary>
            Indicates whether a 0-to-1 depth range mapping is preferred. For OpenGL, this is not the default, and is not available
            on all systems.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.PreferStandardClipSpaceYDirection">
            <summary>
            Indicates whether a bottom-to-top-increasing clip space Y direction is preferred. For Vulkan, this is not the
            default, and may not be available on all systems.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsDeviceOptions.SwapchainSrgbFormat">
            <summary>
            Indicates whether the main Swapchain should use an sRGB format. This value is only used in cases where the properties
            of the main SwapChain are not explicitly specified with a <see cref="T:Veldrid.SwapchainDescription"/>. If they are, then the
            value of <see cref="F:Veldrid.SwapchainDescription.ColorSrgb"/> will supercede the value specified here.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with no main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will support debug features, provided they are supported by
            the host system.</param>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean,System.Nullable{Veldrid.PixelFormat},System.Boolean)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with a main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will enable debug features, provided they are supported by
            the host system.</param>
            <param name="swapchainDepthFormat">An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the
            swapchain. If this value is null, then no depth buffer will be present on the swapchain.</param>
            <param name="syncToVerticalBlank">Indicates whether the main Swapchain will be synchronized to the window system's
            vertical refresh rate.</param>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean,System.Nullable{Veldrid.PixelFormat},System.Boolean,Veldrid.ResourceBindingModel)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with a main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will enable debug features, provided they are supported by
            the host system.</param>
            <param name="swapchainDepthFormat">An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the
            swapchain. If this value is null, then no depth buffer will be present on the swapchain.</param>
            <param name="syncToVerticalBlank">Indicates whether the main Swapchain will be synchronized to the window system's
            vertical refresh rate.</param>
            <param name="resourceBindingModel">Specifies which model the rendering backend should use for binding resources.</param>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean,System.Nullable{Veldrid.PixelFormat},System.Boolean,Veldrid.ResourceBindingModel,System.Boolean)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with a main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will enable debug features, provided they are supported by
            the host system.</param>
            <param name="swapchainDepthFormat">An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the
            swapchain. If this value is null, then no depth buffer will be present on the swapchain.</param>
            <param name="syncToVerticalBlank">Indicates whether the main Swapchain will be synchronized to the window system's
            vertical refresh rate.</param>
            <param name="resourceBindingModel">Specifies which model the rendering backend should use for binding resources.</param>
            <param name="preferDepthRangeZeroToOne">Indicates whether a 0-to-1 depth range mapping is preferred. For OpenGL,
            this is not the default, and is not available on all systems.</param>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean,System.Nullable{Veldrid.PixelFormat},System.Boolean,Veldrid.ResourceBindingModel,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with a main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will enable debug features, provided they are supported by
            the host system.</param>
            <param name="swapchainDepthFormat">An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the
            swapchain. If this value is null, then no depth buffer will be present on the swapchain.</param>
            <param name="syncToVerticalBlank">Indicates whether the main Swapchain will be synchronized to the window system's
            vertical refresh rate.</param>
            <param name="resourceBindingModel">Specifies which model the rendering backend should use for binding resources.</param>
            <param name="preferDepthRangeZeroToOne">Indicates whether a 0-to-1 depth range mapping is preferred. For OpenGL,
            this is not the default, and is not available on all systems.</param>
            <param name="preferStandardClipSpaceYDirection">Indicates whether a bottom-to-top-increasing clip space Y direction
            is preferred. For Vulkan, this is not the default, and is not available on all systems.</param>
        </member>
        <member name="M:Veldrid.GraphicsDeviceOptions.#ctor(System.Boolean,System.Nullable{Veldrid.PixelFormat},System.Boolean,Veldrid.ResourceBindingModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new GraphicsDeviceOptions for a device with a main Swapchain.
            </summary>
            <param name="debug">Indicates whether the GraphicsDevice will enable debug features, provided they are supported by
            the host system.</param>
            <param name="swapchainDepthFormat">An optional <see cref="T:Veldrid.PixelFormat"/> to be used for the depth buffer of the
            swapchain. If this value is null, then no depth buffer will be present on the swapchain.</param>
            <param name="syncToVerticalBlank">Indicates whether the main Swapchain will be synchronized to the window system's
            vertical refresh rate.</param>
            <param name="resourceBindingModel">Specifies which model the rendering backend should use for binding resources.</param>
            <param name="preferDepthRangeZeroToOne">Indicates whether a 0-to-1 depth range mapping is preferred. For OpenGL,
            this is not the default, and is not available on all systems.</param>
            <param name="preferStandardClipSpaceYDirection">Indicates whether a bottom-to-top-increasing clip space Y direction
            is preferred. For Vulkan, this is not the default, and is not available on all systems.</param>
            <param name="swapchainSrgbFormat">Indicates whether the main Swapchain should use an sRGB format. This value is only
            used in cases where the properties of the main SwapChain are not explicitly specified with a
            <see cref="T:Veldrid.SwapchainDescription"/>. If they are, then the value of <see cref="F:Veldrid.SwapchainDescription.ColorSrgb"/> will
            supercede the value specified here.</param>
        </member>
        <member name="T:Veldrid.GraphicsPipelineDescription">
            <summary>
            Describes a graphics <see cref="T:Veldrid.Pipeline"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.BlendState">
            <summary>
            A description of the blend state, which controls how color values are blended into each color target.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.DepthStencilState">
            <summary>
            A description of the depth stencil state, which controls depth tests, writing, and comparisons.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.RasterizerState">
            <summary>
            A description of the rasterizer state, which controls culling, clipping, scissor, and polygon-fill behavior.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.PrimitiveTopology">
            <summary>
            The <see cref="F:Veldrid.GraphicsPipelineDescription.PrimitiveTopology"/> to use, which controls how a series of input vertices is interpreted by the
            <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.ShaderSet">
            <summary>
            A description of the shader set to be used.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.ResourceLayouts">
            <summary>
            An array of <see cref="T:Veldrid.ResourceLayout"/>, which controls the layout of shader resoruces in the <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.Outputs">
            <summary>
            A description of the output attachments used by the <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.GraphicsPipelineDescription.ResourceBindingModel">
            <summary>
            Specifies which model the rendering backend should use for binding resources.
            If <code>null</code>, the pipeline will use the value specified in <see cref="T:Veldrid.GraphicsDeviceOptions"/>.
            </summary>
        </member>
        <member name="M:Veldrid.GraphicsPipelineDescription.#ctor(Veldrid.BlendStateDescription,Veldrid.DepthStencilStateDescription,Veldrid.RasterizerStateDescription,Veldrid.PrimitiveTopology,Veldrid.ShaderSetDescription,Veldrid.ResourceLayout[],Veldrid.OutputDescription)">
            <summary>
            Constructs a new <see cref="T:Veldrid.GraphicsPipelineDescription"/>.
            </summary>
            <param name="blendState">A description of the blend state, which controls how color values are blended into each
            color target.</param>
            <param name="depthStencilStateDescription">A description of the depth stencil state, which controls depth tests,
            writing, and comparisons.</param>
            <param name="rasterizerState">A description of the rasterizer state, which controls culling, clipping, scissor, and
            polygon-fill behavior.</param>
            <param name="primitiveTopology">The <see cref="F:Veldrid.GraphicsPipelineDescription.PrimitiveTopology"/> to use, which controls how a series of input
            vertices is interpreted by the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="shaderSet">A description of the shader set to be used.</param>
            <param name="resourceLayouts">An array of <see cref="T:Veldrid.ResourceLayout"/>, which controls the layout of shader resoruces
            in the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="outputs">A description of the output attachments used by the <see cref="T:Veldrid.Pipeline"/>.</param>
        </member>
        <member name="M:Veldrid.GraphicsPipelineDescription.#ctor(Veldrid.BlendStateDescription,Veldrid.DepthStencilStateDescription,Veldrid.RasterizerStateDescription,Veldrid.PrimitiveTopology,Veldrid.ShaderSetDescription,Veldrid.ResourceLayout,Veldrid.OutputDescription)">
            <summary>
            Constructs a new <see cref="T:Veldrid.GraphicsPipelineDescription"/>.
            </summary>
            <param name="blendState">A description of the blend state, which controls how color values are blended into each
            color target.</param>
            <param name="depthStencilStateDescription">A description of the depth stencil state, which controls depth tests,
            writing, and comparisons.</param>
            <param name="rasterizerState">A description of the rasterizer state, which controls culling, clipping, scissor, and
            polygon-fill behavior.</param>
            <param name="primitiveTopology">The <see cref="F:Veldrid.GraphicsPipelineDescription.PrimitiveTopology"/> to use, which controls how a series of input
            vertices is interpreted by the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="shaderSet">A description of the shader set to be used.</param>
            <param name="resourceLayout">A <see cref="T:Veldrid.ResourceLayout"/>, which controls the layout of shader resoruces in the
            <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="outputs">A description of the output attachments used by the <see cref="T:Veldrid.Pipeline"/>.</param>
        </member>
        <member name="M:Veldrid.GraphicsPipelineDescription.#ctor(Veldrid.BlendStateDescription,Veldrid.DepthStencilStateDescription,Veldrid.RasterizerStateDescription,Veldrid.PrimitiveTopology,Veldrid.ShaderSetDescription,Veldrid.ResourceLayout[],Veldrid.OutputDescription,Veldrid.ResourceBindingModel)">
            <summary>
            Constructs a new <see cref="T:Veldrid.GraphicsPipelineDescription"/>.
            </summary>
            <param name="blendState">A description of the blend state, which controls how color values are blended into each
            color target.</param>
            <param name="depthStencilStateDescription">A description of the depth stencil state, which controls depth tests,
            writing, and comparisons.</param>
            <param name="rasterizerState">A description of the rasterizer state, which controls culling, clipping, scissor, and
            polygon-fill behavior.</param>
            <param name="primitiveTopology">The <see cref="F:Veldrid.GraphicsPipelineDescription.PrimitiveTopology"/> to use, which controls how a series of input
            vertices is interpreted by the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="shaderSet">A description of the shader set to be used.</param>
            <param name="resourceLayouts">An array of <see cref="T:Veldrid.ResourceLayout"/>, which controls the layout of shader resoruces
            in the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="outputs">A description of the output attachments used by the <see cref="T:Veldrid.Pipeline"/>.</param>
            <param name="resourceBindingModel">The <see cref="F:Veldrid.GraphicsPipelineDescription.ResourceBindingModel"/> to use for this pipeline. Overrides
            the value specified in <see cref="T:Veldrid.GraphicsDeviceOptions"/>.</param>
        </member>
        <member name="M:Veldrid.GraphicsPipelineDescription.Equals(Veldrid.GraphicsPipelineDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.GraphicsPipelineDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.IndexFormat">
            <summary>
            The format of index data used in a <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.IndexFormat.UInt16">
            <summary>
            Each index is a 16-bit unsigned integer (System.UInt16).
            </summary>
        </member>
        <member name="F:Veldrid.IndexFormat.UInt32">
            <summary>
            Each index is a 32-bit unsigned integer (System.UInt32).
            </summary>
        </member>
        <member name="T:Veldrid.IndirectDispatchArguments">
            <summary>
            A structure describing the format expected by indirect dispatch commands contained in an indirect <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDispatchArguments.GroupCountX">
            <summary>
            The X group count, as if passed to the <see cref="M:Veldrid.CommandList.Dispatch(System.UInt32,System.UInt32,System.UInt32)"/> method.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDispatchArguments.GroupCountY">
            <summary>
            The Y group count, as if passed to the <see cref="M:Veldrid.CommandList.Dispatch(System.UInt32,System.UInt32,System.UInt32)"/> method.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDispatchArguments.GroupCountZ">
            <summary>
            The Z group count, as if passed to the <see cref="M:Veldrid.CommandList.Dispatch(System.UInt32,System.UInt32,System.UInt32)"/> method.
            </summary>
        </member>
        <member name="T:Veldrid.IndirectDrawArguments">
            <summary>
            A structure describing the format expected by indirect draw commands contained in an indirect <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawArguments.VertexCount">
            <summary>
            The number of vertices to draw.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawArguments.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawArguments.FirstVertex">
            <summary>
            The first vertex to draw. Subsequent vertices are incremented by 1.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawArguments.FirstInstance">
            <summary>
            The first instance to draw. Subsequent instances are incrmented by 1.
            </summary>
        </member>
        <member name="T:Veldrid.IndirectDrawIndexedArguments">
            <summary>
            A structure describing the format expected by indirect, indexed draw commands contained in an indirect
            <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawIndexedArguments.IndexCount">
            <summary>
            The number of indices to use in the indexed draw.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawIndexedArguments.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawIndexedArguments.FirstIndex">
            <summary>
            The value which is used as the start of the indices used for the draw.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawIndexedArguments.VertexOffset">
            <summary>
            An offset which is added to each vertex element referenced by the index <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.IndirectDrawIndexedArguments.FirstInstance">
            <summary>
            The first instance to draw. Subsequent instances (if InstanceCount > 1) are incremented by 1.
            </summary>
        </member>
        <member name="T:Veldrid.MapMode">
            <summary>
            Identifies how a <see cref="T:Veldrid.MappableResource"/> will be mapped into CPU address space.
            </summary>
        </member>
        <member name="F:Veldrid.MapMode.Read">
            <summary>
            A read-only resource mapping. The mapped data region is not writable, and cannot be used to transfer data into the
            graphics resource. NOTE: This mode can only be used on resources created with the Staging usage flag.
            </summary>
        </member>
        <member name="F:Veldrid.MapMode.Write">
            <summary>
            A write-only resource mapping. The mapped data region is writable, and will be transferred into the graphics resource
            when <see cref="M:Veldrid.GraphicsDevice.Unmap(Veldrid.MappableResource,System.UInt32)"/> is called. NOTE: upon mapping a buffer with this
            mode, the previous contents of the resource will be erased. This mode can only be used to entirely replace the
            contents of a resource.
            </summary>
        </member>
        <member name="F:Veldrid.MapMode.ReadWrite">
            <summary>
            A read-write resource mapping. The mapped data region is both readable and writable. NOTE: this mode can only be used
            on resources created with the Staging usage flag.
            </summary>
        </member>
        <member name="T:Veldrid.MappableResource">
            <summary>
            A marker interface designating a device resource which can be mapped into CPU-visible memory with
            <see cref="M:Veldrid.GraphicsDevice.Map(Veldrid.MappableResource,Veldrid.MapMode,System.UInt32)"/>
            </summary>
        </member>
        <member name="T:Veldrid.MappedResource">
            <summary>
            A structure describing the layout of a mapped <see cref="T:Veldrid.MappableResource"/> object.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.Resource">
            <summary>
            The resource which has been mapped.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.Mode">
            <summary>
            Identifies the <see cref="T:Veldrid.MapMode"/> that was used to map the resource.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.Data">
            <summary>
            A pointer to the start of the mapped data region.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.SizeInBytes">
            <summary>
            The total size, in bytes, of the mapped data region.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.Subresource">
            <summary>
            For mapped <see cref="T:Veldrid.Texture"/> resources, this is the subresource which is mapped.
            For <see cref="T:Veldrid.DeviceBuffer"/> resources, this field has no meaning.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.RowPitch">
            <summary>
            For mapped <see cref="T:Veldrid.Texture"/> resources, this is the number of bytes between each row of texels.
            For <see cref="T:Veldrid.DeviceBuffer"/> resources, this field has no meaning.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResource.DepthPitch">
            <summary>
            For mapped <see cref="T:Veldrid.Texture"/> resources, this is the number of bytes between each depth slice of a 3D Texture.
            For <see cref="T:Veldrid.DeviceBuffer"/> resources or 2D Textures, this field has no meaning.
            </summary>
        </member>
        <member name="T:Veldrid.MappedResourceView`1">
            <summary>
            A typed view of a <see cref="F:Veldrid.MappedResourceView`1.MappedResource"/>. Provides by-reference structured access to individual elements in the
            mapped resource.
            </summary>
            <typeparam name="T">The blittable value type which mapped data is viewed as.</typeparam>
        </member>
        <member name="F:Veldrid.MappedResourceView`1.MappedResource">
            <summary>
            The <see cref="F:Veldrid.MappedResourceView`1.MappedResource"/> that this instance views.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResourceView`1.SizeInBytes">
            <summary>
            The total size in bytes of the mapped resource.
            </summary>
        </member>
        <member name="F:Veldrid.MappedResourceView`1.Count">
            <summary>
            The total number of structures that is contained in the resource. This is effectively the total number of bytes
            divided by the size of the structure type.
            </summary>
        </member>
        <member name="M:Veldrid.MappedResourceView`1.#ctor(Veldrid.MappedResource)">
            <summary>
            Constructs a new MappedResourceView which wraps the given <see cref="F:Veldrid.MappedResourceView`1.MappedResource"/>.
            </summary>
            <param name="rawResource">The raw resource which has been mapped.</param>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.Int32)">
            <summary>
            Gets a reference to the structure value at the given index.
            </summary>
            <param name="index">The index of the value.</param>
            <returns>A reference to the value at the given index.</returns>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.UInt32)">
            <summary>
            Gets a reference to the structure value at the given index.
            </summary>
            <param name="index">The index of the value.</param>
            <returns>A reference to the value at the given index.</returns>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a reference to the structure at the given 2-dimensional texture coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>A reference to the value at the given coordinates.</returns>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.UInt32,System.UInt32)">
            <summary>
            Gets a reference to the structure at the given 2-dimensional texture coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>A reference to the value at the given coordinates.</returns>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a reference to the structure at the given 3-dimensional texture coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <returns>A reference to the value at the given coordinates.</returns>
        </member>
        <member name="P:Veldrid.MappedResourceView`1.Item(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Gets a reference to the structure at the given 3-dimensional texture coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <returns>A reference to the value at the given coordinates.</returns>
        </member>
        <member name="P:Veldrid.MTL.MTLTexture.DeviceTexture">
            <summary>
            The native MTLTexture object. This property is only valid for non-staging Textures.
            </summary>
        </member>
        <member name="P:Veldrid.MTL.MTLTexture.StagingBuffer">
            <summary>
            The staging MTLBuffer object. This property is only valid for staging Textures.
            </summary>
        </member>
        <member name="T:Veldrid.OpenGL.NoAllocEntryList.Tracked`1">
            <summary>
            A handle for an object stored in some List.
            </summary>
            <typeparam name="T">The type of object to track.</typeparam>
        </member>
        <member name="M:Veldrid.OpenGL.OpenGLExtensions.IsExtensionSupported(System.String)">
            <summary>
            Returns a value indicating whether the given extension is supported.
            </summary>
            <param name="extension">The name of the extensions. For example, "</param>
            <returns></returns>
        </member>
        <member name="F:Veldrid.OpenGL.OpenGLTextureBindingSlotInfo.RelativeIndex">
            <summary>
            The relative index of this binding with relation to the other textures used by a shader.
            Generally, this is the texture unit that the binding will be placed into.
            </summary>
        </member>
        <member name="F:Veldrid.OpenGL.OpenGLTextureBindingSlotInfo.UniformLocation">
            <summary>
            The uniform location of the binding in the shader program.
            </summary>
        </member>
        <member name="F:Veldrid.OpenGL.OpenGLSamplerBindingSlotInfo.RelativeIndices">
            <summary>
            The relative indices of this binding with relation to the other textures used by a shader.
            Generally, these are the texture units that the sampler will be bound to.
            </summary>
        </member>
        <member name="T:Veldrid.OpenGL.OpenGLPlatformInfo">
            <summary>
            Encapsulates various pieces of OpenGL context, necessary for creating a <see cref="T:Veldrid.GraphicsDevice"/> using the OpenGL
            API.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.OpenGLContextHandle">
            <summary>
            The OpenGL context handle.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.GetProcAddress">
            <summary>
            A delegate which can be used to retrieve OpenGL function pointers by name.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.MakeCurrent">
            <summary>
            A delegate which can be used to make the given OpenGL context current on the calling thread.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.GetCurrentContext">
            <summary>
            A delegate which can be used to retrieve the calling thread's active OpenGL context.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.ClearCurrentContext">
            <summary>
            A delegate which can be used to clear the calling thread's GL context.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.DeleteContext">
            <summary>
            A delegate which can be used to delete the given context.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.SwapBuffers">
            <summary>
            A delegate which can be used to swap the main back buffer associated with the OpenGL context.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.SetSyncToVerticalBlank">
            <summary>
            A delegate which can be used to set the synchronization behavior of the OpenGL context.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.SetSwapchainFramebuffer">
            <summary>
            A delegate which can be used to set the framebuffer used to render to the application Swapchain.
            If this is null, the default FBO (0) will be bound.
            </summary>
        </member>
        <member name="P:Veldrid.OpenGL.OpenGLPlatformInfo.ResizeSwapchain">
            <summary>
            A delegate which is invoked when the main Swapchain is resized. This may be null, in which case
            no special action is taken when the Swapchain is resized.
            </summary>
        </member>
        <member name="M:Veldrid.OpenGL.OpenGLPlatformInfo.#ctor(System.IntPtr,System.Func{System.String,System.IntPtr},System.Action{System.IntPtr},System.Func{System.IntPtr},System.Action,System.Action{System.IntPtr},System.Action,System.Action{System.Boolean})">
            <summary>
            Constructs a new OpenGLPlatformInfo.
            </summary>
            <param name="openGLContextHandle">The OpenGL context handle.</param>
            <param name="getProcAddress">A delegate which can be used to retrieve OpenGL function pointers by name.</param>
            <param name="makeCurrent">A delegate which can be used to make the given OpenGL context current on the calling
            thread.</param>
            <param name="getCurrentContext">A delegate which can be used to retrieve the calling thread's active OpenGL context.</param>
            <param name="clearCurrentContext">A delegate which can be used to clear the calling thread's GL context.</param>
            <param name="deleteContext">A delegate which can be used to delete the given context.</param>
            <param name="swapBuffers">A delegate which can be used to swap the main back buffer associated with the OpenGL
            context.</param>
            <param name="setSyncToVerticalBlank">A delegate which can be used to set the synchronization behavior of the OpenGL
            context.</param>
        </member>
        <member name="M:Veldrid.OpenGL.OpenGLPlatformInfo.#ctor(System.IntPtr,System.Func{System.String,System.IntPtr},System.Action{System.IntPtr},System.Func{System.IntPtr},System.Action,System.Action{System.IntPtr},System.Action,System.Action{System.Boolean},System.Action,System.Action{System.UInt32,System.UInt32})">
            <summary>
            Constructs a new OpenGLPlatformInfo.
            </summary>
            <param name="openGLContextHandle">The OpenGL context handle.</param>
            <param name="getProcAddress">A delegate which can be used to retrieve OpenGL function pointers by name.</param>
            <param name="makeCurrent">A delegate which can be used to make the given OpenGL context current on the calling
            thread.</param>
            <param name="getCurrentContext">A delegate which can be used to retrieve the calling thread's active OpenGL context.</param>
            <param name="clearCurrentContext">A delegate which can be used to clear the calling thread's GL context.</param>
            <param name="deleteContext">A delegate which can be used to delete the given context.</param>
            <param name="swapBuffers">A delegate which can be used to swap the main back buffer associated with the OpenGL
            context.</param>
            <param name="setSyncToVerticalBlank">A delegate which can be used to set the synchronization behavior of the OpenGL
            context.</param>
            <param name="setSwapchainFramebuffer">A delegate which can be used to set the framebuffer used to render to the
            application Swapchain.</param>
            <param name="resizeSwapchain">A delegate which is invoked when the main Swapchain is resized. This may be null,
            in which case no special action is taken when the Swapchain is resized.</param>
        </member>
        <member name="T:Veldrid.OpenGL.OpenGLTextureSamplerManager">
            <summary>
            A utility class managing the relationships between textures, samplers, and their binding locations.
            </summary>
        </member>
        <member name="T:Veldrid.OutputAttachmentDescription">
            <summary>
            Describes an individual output attachment and its format.
            </summary>
        </member>
        <member name="F:Veldrid.OutputAttachmentDescription.Format">
            <summary>
            The format of the <see cref="T:Veldrid.Texture"/> attachment.
            </summary>
        </member>
        <member name="M:Veldrid.OutputAttachmentDescription.#ctor(Veldrid.PixelFormat)">
            <summary>
            Constructs a new <see cref="T:Veldrid.OutputAttachmentDescription"/>.
            </summary>
            <param name="format">THe format of the <see cref="T:Veldrid.Texture"/> attachment.</param>
        </member>
        <member name="M:Veldrid.OutputAttachmentDescription.Equals(Veldrid.OutputAttachmentDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.OutputAttachmentDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.OutputDescription">
            <summary>
            Describes a set of output attachments and their formats.
            </summary>
        </member>
        <member name="F:Veldrid.OutputDescription.DepthAttachment">
            <summary>
            A description of the depth attachment, or null if none exists.
            </summary>
        </member>
        <member name="F:Veldrid.OutputDescription.ColorAttachments">
            <summary>
            An array of attachment descriptions, one for each color attachment. May be empty.
            </summary>
        </member>
        <member name="F:Veldrid.OutputDescription.SampleCount">
            <summary>
            The number of samples in each target attachment.
            </summary>
        </member>
        <member name="M:Veldrid.OutputDescription.#ctor(System.Nullable{Veldrid.OutputAttachmentDescription},Veldrid.OutputAttachmentDescription[])">
            <summary>
            Constructs a new <see cref="T:Veldrid.OutputDescription"/>.
            </summary>
            <param name="depthAttachment">A description of the depth attachment.</param>
            <param name="colorAttachments">An array of descriptions of each color attachment.</param>
        </member>
        <member name="M:Veldrid.OutputDescription.#ctor(System.Nullable{Veldrid.OutputAttachmentDescription},Veldrid.OutputAttachmentDescription[],Veldrid.TextureSampleCount)">
            <summary>
            Constructs a new <see cref="T:Veldrid.OutputDescription"/>.
            </summary>
            <param name="depthAttachment">A description of the depth attachment.</param>
            <param name="colorAttachments">An array of descriptions of each color attachment.</param>
            <param name="sampleCount">The number of samples in each target attachment.</param>
        </member>
        <member name="M:Veldrid.OutputDescription.Equals(Veldrid.OutputDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.OutputDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.Pipeline">
            <summary>
            A device resource encapsulating all state in a graphics pipeline. Used in 
            <see cref="M:Veldrid.CommandList.SetPipeline(Veldrid.Pipeline)"/> to prepare a <see cref="T:Veldrid.CommandList"/> for draw commands.
            See <see cref="T:Veldrid.GraphicsPipelineDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Pipeline.IsComputePipeline">
            <summary>
            Gets a value indicating whether this instance represents a compute Pipeline.
            If false, this instance is a graphics pipeline.
            </summary>
        </member>
        <member name="P:Veldrid.Pipeline.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Pipeline.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.PixelFormat">
            <summary>
            The format of data stored in a <see cref="T:Veldrid.Texture"/>.
            Each name is a compound identifier, where each component denotes a name and a number of bits used to store that
            component. The final component identifies the storage type of each component. "Float" identifies a signed, floating-point
            type, UNorm identifies an unsigned integer type which is normalized, meaning it occupies the full space of the integer
            type. The SRgb suffix for normalized integer formats indicates that the RGB components are stored in sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_B8_A8_UNorm">
            <summary>
            RGBA component order. Each component is an 8-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.B8_G8_R8_A8_UNorm">
            <summary>
            BGRA component order. Each component is an 8-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_UNorm">
            <summary>
            Single-channel, 8-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_UNorm">
            <summary>
            Single-channel, 16-bit unsigned normalized integer. Can be used as a depth format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_B32_A32_Float">
            <summary>
            RGBA component order. Each component is a 32-bit signed floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_Float">
            <summary>
            Single-channel, 32-bit signed floating-point value. Can be used as a depth format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC3_UNorm">
            <summary>
            BC3 block compressed format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.D24_UNorm_S8_UInt">
            <summary>
            A depth-stencil format where the depth is stored in a 24-bit unsigned normalized integer, and the stencil is stored
            in an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.D32_Float_S8_UInt">
            <summary>
            A depth-stencil format where the depth is stored in a 32-bit signed floating-point value, and the stencil is stored
            in an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_B32_A32_UInt">
            <summary>
            RGBA component order. Each component is a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_SNorm">
            <summary>
            RG component order. Each component is an 8-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC1_Rgb_UNorm">
            <summary>
            BC1 block compressed format with no alpha.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC1_Rgba_UNorm">
            <summary>
            BC1 block compressed format with a single-bit alpha channel.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC2_UNorm">
            <summary>
            BC2 block compressed format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R10_G10_B10_A2_UNorm">
            <summary>
            A 32-bit packed format. The 10-bit R component occupies bits 0..9, the 10-bit G component occupies bits 10..19,
            the 10-bit A component occupies 20..29, and the 2-bit A component occupies bits 30..31. Each value is an unsigned,
            normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R10_G10_B10_A2_UInt">
            <summary>
            A 32-bit packed format. The 10-bit R component occupies bits 0..9, the 10-bit G component occupies bits 10..19,
            the 10-bit A component occupies 20..29, and the 2-bit A component occupies bits 30..31. Each value is an unsigned
            integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R11_G11_B10_Float">
            <summary>
            A 32-bit packed format. The 11-bit R componnent occupies bits 0..10, the 11-bit G component occupies bits 11..21,
            and the 10-bit B component occupies bits 22..31. Each value is an unsigned floating point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_SNorm">
            <summary>
            Single-channel, 8-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_UInt">
            <summary>
            Single-channel, 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_SInt">
            <summary>
            Single-channel, 8-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_SNorm">
            <summary>
            Single-channel, 16-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_UInt">
            <summary>
            Single-channel, 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_SInt">
            <summary>
            Single-channel, 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_Float">
            <summary>
            Single-channel, 16-bit signed floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_UInt">
            <summary>
            Single-channel, 32-bit unsigned integer
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_SInt">
            <summary>
            Single-channel, 32-bit signed integer
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_UNorm">
            <summary>
            RG component order. Each component is an 8-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_UInt">
            <summary>
            RG component order. Each component is an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_SInt">
            <summary>
            RG component order. Each component is an 8-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_UNorm">
            <summary>
            RG component order. Each component is a 16-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_SNorm">
            <summary>
            RG component order. Each component is a 16-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_UInt">
            <summary>
            RG component order. Each component is a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_SInt">
            <summary>
            RG component order. Each component is a 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_Float">
            <summary>
            RG component order. Each component is a 16-bit signed floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_UInt">
            <summary>
            RG component order. Each component is a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_SInt">
            <summary>
            RG component order. Each component is a 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_Float">
            <summary>
            RG component order. Each component is a 32-bit signed floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_B8_A8_SNorm">
            <summary>
            RGBA component order. Each component is an 8-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_B8_A8_UInt">
            <summary>
            RGBA component order. Each component is an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_B8_A8_SInt">
            <summary>
            RGBA component order. Each component is an 8-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_B16_A16_UNorm">
            <summary>
            RGBA component order. Each component is a 16-bit unsigned normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_B16_A16_SNorm">
            <summary>
            RGBA component order. Each component is a 16-bit signed normalized integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_B16_A16_UInt">
            <summary>
            RGBA component order. Each component is a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_B16_A16_SInt">
            <summary>
            RGBA component order. Each component is a 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R16_G16_B16_A16_Float">
            <summary>
            RGBA component order. Each component is a 16-bit floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R32_G32_B32_A32_SInt">
            <summary>
            RGBA component order. Each component is a 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.ETC2_R8_G8_B8_UNorm">
            <summary>
            A 64-bit, 4x4 block-compressed format storing unsigned normalized RGB data.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.ETC2_R8_G8_B8_A1_UNorm">
            <summary>
            A 64-bit, 4x4 block-compressed format storing unsigned normalized RGB data, as well as 1 bit of alpha data.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.ETC2_R8_G8_B8_A8_UNorm">
            <summary>
            A 128-bit, 4x4 block-compressed format storing 64 bits of unsigned normalized RGB data, as well as 64 bits of alpha
            data.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC4_UNorm">
            <summary>
            BC4 block compressed format, unsigned normalized values.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC4_SNorm">
            <summary>
            BC4 block compressed format, signed normalized values.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC5_UNorm">
            <summary>
            BC5 block compressed format, unsigned normalized values.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC5_SNorm">
            <summary>
            BC5 block compressed format, signed normalized values.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC6H_UFloat">
            <summary>
            BC6H unsigned block compressed format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC6H_SFloat">
            <summary>
            BC6H signed block compressed format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC7_UNorm">
            <summary>
            BC7 block compressed format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.R8_G8_B8_A8_UNorm_SRgb">
            <summary>
            RGBA component order. Each component is an 8-bit unsigned normalized integer.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.B8_G8_R8_A8_UNorm_SRgb">
            <summary>
            BGRA component order. Each component is an 8-bit unsigned normalized integer.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC1_Rgb_UNorm_SRgb">
            <summary>
            BC1 block compressed format with no alpha.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC1_Rgba_UNorm_SRgb">
            <summary>
            BC1 block compressed format with a single-bit alpha channel.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC2_UNorm_SRgb">
            <summary>
            BC2 block compressed format.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC3_UNorm_SRgb">
            <summary>
            BC3 block compressed format.
            This is an sRGB format.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormat.BC7_UNorm_SRgb">
            <summary>
            BC7 block compressed format.
            This is an sRGB format.
            </summary>
        </member>
        <member name="T:Veldrid.PixelFormatProperties">
            <summary>
            Describes the properties that are supported for a particular combination of <see cref="T:Veldrid.PixelFormat"/>,
            <see cref="T:Veldrid.TextureType"/>, and <see cref="T:Veldrid.TextureUsage"/> by a <see cref="T:Veldrid.GraphicsDevice"/>.
            See <see cref="M:Veldrid.GraphicsDevice.GetPixelFormatSupport(Veldrid.PixelFormat,Veldrid.TextureType,Veldrid.TextureUsage,Veldrid.PixelFormatProperties@)"/>.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormatProperties.MaxWidth">
            <summary>
            The maximum supported width.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormatProperties.MaxHeight">
            <summary>
            The maximum supported height.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormatProperties.MaxDepth">
            <summary>
            The maximum supported depth.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormatProperties.MaxMipLevels">
            <summary>
            The maximum supported number of mipmap levels.
            </summary>
        </member>
        <member name="F:Veldrid.PixelFormatProperties.MaxArrayLayers">
            <summary>
            The maximum supported number of array layers.
            </summary>
        </member>
        <member name="M:Veldrid.PixelFormatProperties.IsSampleCountSupported(Veldrid.TextureSampleCount)">
            <summary>
            Gets a value indicating whether or not the given <see cref="T:Veldrid.TextureSampleCount"/> is supported.
            </summary>
            <param name="count">The <see cref="T:Veldrid.TextureSampleCount"/> to query.</param>
            <returns>True if the sample count is supported; false otherwise.</returns>
        </member>
        <member name="T:Veldrid.PolygonFillMode">
            <summary>
            Indicates how the rasterizer will fill polygons.
            </summary>
        </member>
        <member name="F:Veldrid.PolygonFillMode.Solid">
            <summary>
            Polygons are filled completely.
            </summary>
        </member>
        <member name="F:Veldrid.PolygonFillMode.Wireframe">
            <summary>
            Polygons are outlined in a "wireframe" style.
            </summary>
        </member>
        <member name="T:Veldrid.PrimitiveTopology">
            <summary>
            Determines how a sequence of vertices is interepreted by the rasterizer.
            </summary>
        </member>
        <member name="F:Veldrid.PrimitiveTopology.TriangleList">
            <summary>
            A list of isolated, 3-element triangles.
            </summary>
        </member>
        <member name="F:Veldrid.PrimitiveTopology.TriangleStrip">
            <summary>
            A series of connected triangles.
            </summary>
        </member>
        <member name="F:Veldrid.PrimitiveTopology.LineList">
            <summary>
            A series of isolated, 2-element line segments.
            </summary>
        </member>
        <member name="F:Veldrid.PrimitiveTopology.LineStrip">
            <summary>
            A series of connected line segments.
            </summary>
        </member>
        <member name="F:Veldrid.PrimitiveTopology.PointList">
            <summary>
            A series of isolated points.
            </summary>
        </member>
        <member name="T:Veldrid.RasterizerStateDescription">
            <summary>
            A <see cref="T:Veldrid.Pipeline"/> component describing the properties of the rasterizer.
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.CullMode">
            <summary>
            Controls which face will be culled.
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.FillMode">
            <summary>
            Controls how the rasterizer fills polygons.
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.FrontFace">
            <summary>
            Controls the winding order used to determine the front face of primitives.
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.DepthClipEnabled">
            <summary>
            Controls whether depth clipping is enabled.
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.ScissorTestEnabled">
            <summary>
            Controls whether the scissor test is enabled.
            </summary>
        </member>
        <member name="M:Veldrid.RasterizerStateDescription.#ctor(Veldrid.FaceCullMode,Veldrid.PolygonFillMode,Veldrid.FrontFace,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new RasterizerStateDescription.
            </summary>
            <param name="cullMode">Controls which face will be culled.</param>
            <param name="fillMode">Controls how the rasterizer fills polygons.</param>
            <param name="frontFace">Controls the winding order used to determine the front face of primitives.</param>
            <param name="depthClipEnabled">Controls whether depth clipping is enabled.</param>
            <param name="scissorTestEnabled">Controls whether the scissor test is enabled.</param>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.Default">
            <summary>
            Describes the default rasterizer state, with clockwise backface culling, solid polygon filling, and both depth
            clipping and scissor tests enabled.
            Settings:
                CullMode = FaceCullMode.Back
                FillMode = PolygonFillMode.Solid
                FrontFace = FrontFace.Clockwise
                DepthClipEnabled = true
                ScissorTestEnabled = false
            </summary>
        </member>
        <member name="F:Veldrid.RasterizerStateDescription.CullNone">
            <summary>
            Describes a rasterizer state with no culling, solid polygon filling, and both depth
            clipping and scissor tests enabled.
            Settings:
                CullMode = FaceCullMode.None
                FillMode = PolygonFillMode.Solid
                FrontFace = FrontFace.Clockwise
                DepthClipEnabled = true
                ScissorTestEnabled = false
            </summary>
        </member>
        <member name="M:Veldrid.RasterizerStateDescription.Equals(Veldrid.RasterizerStateDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.RasterizerStateDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ResourceBindingModel">
            <summary>
            Identifies a particular binding model used when connecting elements in a <see cref="T:Veldrid.ResourceLayout"/> with resources
            defined in API-specific shader code.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceBindingModel.Default">
            <summary>
            The default binding model.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceBindingModel.Improved">
            <summary>
            An improved binding model which enables greater shader reuse and authoring flexibility.
            </summary>
        </member>
        <member name="T:Veldrid.ResourceFactory">
            <summary>
            A device object responsible for the creation of graphics resources.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceFactory.#ctor(Veldrid.GraphicsDeviceFeatures)">
            <summary></summary>
            <param name="features"></param>
        </member>
        <member name="P:Veldrid.ResourceFactory.BackendType">
            <summary>
            Gets the <see cref="T:Veldrid.GraphicsBackend"/> of this instance.
            </summary>
        </member>
        <member name="P:Veldrid.ResourceFactory.Features">
            <summary>
            Gets the <see cref="T:Veldrid.GraphicsDeviceFeatures"/> this instance was created with.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateGraphicsPipeline(Veldrid.GraphicsPipelineDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Pipeline"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Pipeline"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateGraphicsPipeline(Veldrid.GraphicsPipelineDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Pipeline"/> object.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Pipeline"/> which, when bound to a CommandList, is used to dispatch draw commands.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateGraphicsPipelineCore(Veldrid.GraphicsPipelineDescription@)">
            <summary></summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateComputePipeline(Veldrid.ComputePipelineDescription)">
            <summary>
            Creates a new compute <see cref="T:Veldrid.Pipeline"/> object.
            </summary>
            <param name="description">The desirede properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Pipeline"/> which, when bound to a CommandList, is used to dispatch compute commands.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateComputePipeline(Veldrid.ComputePipelineDescription@)">
            <summary>
            Creates a new compute <see cref="T:Veldrid.Pipeline"/> object.
            </summary>
            <param name="description">The desirede properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Pipeline"/> which, when bound to a CommandList, is used to dispatch compute commands.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateFramebuffer(Veldrid.FramebufferDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Framebuffer"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateFramebuffer(Veldrid.FramebufferDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Framebuffer"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTexture(Veldrid.TextureDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Texture"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTexture(Veldrid.TextureDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Texture"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTexture(System.UInt64,Veldrid.TextureDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Texture"/> from an existing native texture.
            </summary>
            <param name="nativeTexture">A backend-specific handle identifying an existing native texture. See remarks.</param>
            <param name="description">The properties of the existing Texture.</param>
            <returns>A new <see cref="T:Veldrid.Texture"/> wrapping the existing native texture.</returns>
            <remarks>
            The nativeTexture parameter is backend-specific, and the type of data passed in depends on which graphics API is
            being used.
            When using the Vulkan backend, nativeTexture must be a valid VkImage handle.
            When using the Metal backend, nativeTexture must be a valid MTLTexture pointer.
            When using the D3D11 backend, nativeTexture must be a valid pointer to an ID3D11Texture1D, ID3D11Texture2D, or
            ID3D11Texture3D.
            When using the OpenGL backend, nativeTexture must be a valid OpenGL texture name.
            The properties of the Texture will be determined from the <see cref="T:Veldrid.TextureDescription"/> passed in. These
            properties must match the true properties of the existing native texture.
            </remarks>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTexture(System.UInt64,Veldrid.TextureDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Texture"/> from an existing native texture.
            </summary>
            <param name="nativeTexture">A backend-specific handle identifying an existing native texture. See remarks.</param>
            <param name="description">The properties of the existing Texture.</param>
            <returns>A new <see cref="T:Veldrid.Texture"/> wrapping the existing native texture.</returns>
            <remarks>
            The nativeTexture parameter is backend-specific, and the type of data passed in depends on which graphics API is
            being used.
            When using the Vulkan backend, nativeTexture must be a valid VkImage handle.
            When using the Metal backend, nativeTexture must be a valid MTLTexture pointer.
            When using the D3D11 backend, nativeTexture must be a valid pointer to an ID3D11Texture1D, ID3D11Texture2D, or
            ID3D11Texture3D.
            When using the OpenGL backend, nativeTexture must be a valid OpenGL texture name.
            The properties of the Texture will be determined from the <see cref="T:Veldrid.TextureDescription"/> passed in. These
            properties must match the true properties of the existing native texture.
            </remarks>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureCore(System.UInt64,Veldrid.TextureDescription@)">
            <summary></summary>
            <param name="nativeTexture"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureCore(Veldrid.TextureDescription@)">
            <summary>
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureView(Veldrid.Texture)">
            <summary>
            Creates a new <see cref="T:Veldrid.TextureView"/>.
            </summary>
            <param name="target">The target <see cref="T:Veldrid.Texture"/> used in the new view.</param>
            <returns>A new <see cref="T:Veldrid.TextureView"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureView(Veldrid.TextureViewDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.TextureView"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.TextureView"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureView(Veldrid.TextureViewDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.TextureView"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.TextureView"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateTextureViewCore(Veldrid.TextureViewDescription@)">
            <summary>
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateBuffer(Veldrid.BufferDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.DeviceBuffer"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateBuffer(Veldrid.BufferDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.DeviceBuffer"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateBufferCore(Veldrid.BufferDescription@)">
            <summary>
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateSampler(Veldrid.SamplerDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Sampler"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Sampler"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateSampler(Veldrid.SamplerDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Sampler"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Sampler"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateSamplerCore(Veldrid.SamplerDescription@)">
            <summary></summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateShader(Veldrid.ShaderDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Shader"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Shader"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateShader(Veldrid.ShaderDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Shader"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Shader"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateShaderCore(Veldrid.ShaderDescription@)">
            <summary></summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateCommandList">
            <summary>
            Creates a new <see cref="T:Veldrid.CommandList"/>.
            </summary>
            <returns>A new <see cref="T:Veldrid.CommandList"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateCommandList(Veldrid.CommandListDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.CommandList"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.CommandList"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateCommandList(Veldrid.CommandListDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.CommandList"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.CommandList"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateResourceLayout(Veldrid.ResourceLayoutDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.ResourceLayout"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateResourceLayout(Veldrid.ResourceLayoutDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.ResourceLayout"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateResourceSet(Veldrid.ResourceSetDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.ResourceSet"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.ResourceSet"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateResourceSet(Veldrid.ResourceSetDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.ResourceSet"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.ResourceSet"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateFence(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Veldrid.Fence"/> in the given state.
            </summary>
            <param name="signaled">A value indicating whether the Fence should be in the signaled state when created.</param>
            <returns>A new <see cref="T:Veldrid.Fence"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateSwapchain(Veldrid.SwapchainDescription)">
            <summary>
            Creates a new <see cref="T:Veldrid.Swapchain"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Swapchain"/>.</returns>
        </member>
        <member name="M:Veldrid.ResourceFactory.CreateSwapchain(Veldrid.SwapchainDescription@)">
            <summary>
            Creates a new <see cref="T:Veldrid.Swapchain"/>.
            </summary>
            <param name="description">The desired properties of the created object.</param>
            <returns>A new <see cref="T:Veldrid.Swapchain"/>.</returns>
        </member>
        <member name="T:Veldrid.ResourceKind">
            <summary>
            The kind of a <see cref="T:Veldrid.BindableResource"/> object.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceKind.UniformBuffer">
            <summary>
            A <see cref="T:Veldrid.DeviceBuffer"/> accessed as a uniform buffer. A subset of a buffer can be bound using a
            <see cref="T:Veldrid.DeviceBufferRange"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceKind.StructuredBufferReadOnly">
            <summary>
            A <see cref="T:Veldrid.DeviceBuffer"/> accessed as a read-only storage buffer. A subset of a buffer can be bound using a
            <see cref="T:Veldrid.DeviceBufferRange"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceKind.StructuredBufferReadWrite">
            <summary>
            A <see cref="T:Veldrid.DeviceBuffer"/> accessed as a read-write storage buffer. A subset of a buffer can be bound using a
            <see cref="T:Veldrid.DeviceBufferRange"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceKind.TextureReadOnly">
            <summary>
            A read-only <see cref="T:Veldrid.Texture"/>, accessed through a Texture or <see cref="T:Veldrid.TextureView"/>.
            <remarks>Binding a <see cref="T:Veldrid.Texture"/> to a resource slot expecting a TextureReadWrite is equivalent to binding a
            <see cref="T:Veldrid.TextureView"/> that covers the full mip and array layer range, with the original Texture's
            <see cref="T:Veldrid.PixelFormat"/>.</remarks>
            </summary>
        </member>
        <member name="F:Veldrid.ResourceKind.TextureReadWrite">
            <summary>
            A read-write <see cref="T:Veldrid.Texture"/>, accessed through a Texture or <see cref="T:Veldrid.TextureView"/>.
            </summary>
            <remarks>Binding a <see cref="T:Veldrid.Texture"/> to a resource slot expecting a TextureReadWrite is equivalent to binding a
            <see cref="T:Veldrid.TextureView"/> that covers the full mip and array layer range, with the original Texture's
            <see cref="T:Veldrid.PixelFormat"/>.</remarks>
        </member>
        <member name="F:Veldrid.ResourceKind.Sampler">
            <summary>
            A <see cref="T:Veldrid.Sampler"/>.
            </summary>
        </member>
        <member name="T:Veldrid.ResourceLayout">
            <summary>
            A device resource which describes the layout and kind of <see cref="T:Veldrid.BindableResource"/> objects available
            to a shader set.
            See <see cref="T:Veldrid.ResourceLayoutDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.ResourceLayout.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceLayout.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.ResourceLayoutDescription">
            <summary>
            Describes the layout of <see cref="T:Veldrid.BindableResource"/> objects for a <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutDescription.Elements">
            <summary>
            An array of <see cref="T:Veldrid.ResourceLayoutElementDescription"/> objects, describing the properties of each resource
            element in the <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceLayoutDescription.#ctor(Veldrid.ResourceLayoutElementDescription[])">
            <summary>
            Constructs a new ResourceLayoutDescription.
            </summary>
            <param name="elements">An array of <see cref="T:Veldrid.ResourceLayoutElementDescription"/> objects, describing the properties
            of each resource element in the <see cref="T:Veldrid.ResourceLayout"/>.</param>
        </member>
        <member name="M:Veldrid.ResourceLayoutDescription.Equals(Veldrid.ResourceLayoutDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ResourceLayoutDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ResourceLayoutElementDescription">
            <summary>
            Describes an individual resource element in a <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementDescription.Name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementDescription.Kind">
            <summary>
            The kind of resource.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementDescription.Stages">
            <summary>
            The <see cref="T:Veldrid.ShaderStages"/> in which this element is used.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementDescription.Options">
            <summary>
            Miscellaneous resource options for this element.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceLayoutElementDescription.#ctor(System.String,Veldrid.ResourceKind,Veldrid.ShaderStages)">
            <summary>
            Constructs a new ResourceLayoutElementDescription.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="kind">The kind of resource.</param>
            <param name="stages">The <see cref="T:Veldrid.ShaderStages"/> in which this element is used.</param>
        </member>
        <member name="M:Veldrid.ResourceLayoutElementDescription.#ctor(System.String,Veldrid.ResourceKind,Veldrid.ShaderStages,Veldrid.ResourceLayoutElementOptions)">
            <summary>
            Constructs a new ResourceLayoutElementDescription.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="kind">The kind of resource.</param>
            <param name="stages">The <see cref="T:Veldrid.ShaderStages"/> in which this element is used.</param>
            <param name="options">Miscellaneous resource options for this element.</param>
        </member>
        <member name="M:Veldrid.ResourceLayoutElementDescription.Equals(Veldrid.ResourceLayoutElementDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ResourceLayoutElementDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ResourceLayoutElementOptions">
            <summary>
            Miscellaneous options for an element in a <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementOptions.None">
            <summary>
            No special options.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceLayoutElementOptions.DynamicBinding">
            <summary>
            Can be applied to a buffer type resource (<see cref="F:Veldrid.ResourceKind.StructuredBufferReadOnly"/>,
            <see cref="F:Veldrid.ResourceKind.StructuredBufferReadWrite"/>, or <see cref="F:Veldrid.ResourceKind.UniformBuffer"/>), allowing it to be
            bound with a dynamic offset using <see cref="M:Veldrid.CommandList.SetGraphicsResourceSet(System.UInt32,Veldrid.ResourceSet,System.UInt32[])"/>.
            Offsets specified this way must be a multiple of <see cref="P:Veldrid.GraphicsDevice.UniformBufferMinOffsetAlignment"/> or
            <see cref="P:Veldrid.GraphicsDevice.StructuredBufferMinOffsetAlignment"/>.
            </summary>
        </member>
        <member name="T:Veldrid.ResourceSet">
            <summary>
            A device resource used to bind a particular set of <see cref="T:Veldrid.BindableResource"/> objects to a <see cref="T:Veldrid.CommandList"/>.
            See <see cref="T:Veldrid.ResourceSetDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.ResourceSet.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceSet.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.ResourceSetDescription">
            <summary>
            Describes a <see cref="T:Veldrid.ResourceSet"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceSetDescription.Layout">
            <summary>
            The <see cref="T:Veldrid.ResourceLayout"/> describing the number and kind of resources used.
            </summary>
        </member>
        <member name="F:Veldrid.ResourceSetDescription.BoundResources">
            <summary>
            An array of <see cref="T:Veldrid.BindableResource"/> objects.
            The number and type of resources must match those specified in the <see cref="T:Veldrid.ResourceLayout"/>.
            </summary>
        </member>
        <member name="M:Veldrid.ResourceSetDescription.#ctor(Veldrid.ResourceLayout,Veldrid.BindableResource[])">
            <summary>
            Constructs a new ResourceSetDescription.
            </summary>
            <param name="layout">The <see cref="T:Veldrid.ResourceLayout"/> describing the number and kind of resources used.</param>
            <param name="boundResources">An array of <see cref="T:Veldrid.BindableResource"/> objects.
            The number and type of resources must match those specified in the <see cref="T:Veldrid.ResourceLayout"/>.</param>
        </member>
        <member name="M:Veldrid.ResourceSetDescription.Equals(Veldrid.ResourceSetDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ResourceSetDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.RgbaByte">
            <summary>
            A color stored in four 8-bit unsigned normalized integer values, in RGBA component order.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Red">
            <summary>
            Red (255, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.DarkRed">
            <summary>
            Dark Red (153, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Green">
            <summary>
            Green (0, 255, 0, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Blue">
            <summary>
            Blue (0, 0, 255, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Yellow">
            <summary>
            Yellow (255, 255, 0, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Grey">
            <summary>
            Grey (64, 64, 64, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.LightGrey">
            <summary>
            Light Grey (166, 166, 166, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Cyan">
            <summary>
            Cyan (0, 255, 255, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.White">
            <summary>
            White (255, 255, 255, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.CornflowerBlue">
            <summary>
            Cornflower Blue (100, 149, 237, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Clear">
            <summary>
            Clear (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Black">
            <summary>
            Black (0, 0, 0, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Pink">
            <summary>
            Pink (255, 155, 191, 255)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaByte.Orange">
            <summary>
            Orange (255, 92, 0, 255)
            </summary>
        </member>
        <member name="M:Veldrid.RgbaByte.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new RgbaByte from the given components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Veldrid.RgbaByte.Equals(Veldrid.RgbaByte)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.RgbaByte.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Veldrid.RgbaByte.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Veldrid.RgbaByte.ToString">
            <summary>
            Returns a string representation of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Veldrid.RgbaByte.op_Equality(Veldrid.RgbaByte,Veldrid.RgbaByte)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Veldrid.RgbaByte.op_Inequality(Veldrid.RgbaByte,Veldrid.RgbaByte)">
            <summary>
            Element-wise inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="T:Veldrid.RgbaFloat">
            <summary>
            A color stored in four 32-bit floating-point values, in RGBA component order.
            </summary>
        </member>
        <member name="P:Veldrid.RgbaFloat.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="P:Veldrid.RgbaFloat.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="P:Veldrid.RgbaFloat.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:Veldrid.RgbaFloat.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:Veldrid.RgbaFloat.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new RgbaFloat from the given components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Veldrid.RgbaFloat.#ctor(System.Numerics.Vector4)">
            <summary>
            Constructs a new RgbaFloat from the XYZW components of a vector.
            </summary>
            <param name="channels">The vector containing the color components.</param>
        </member>
        <member name="F:Veldrid.RgbaFloat.SizeInBytes">
            <summary>
            The total size, in bytes, of an RgbaFloat value.
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Red">
            <summary>
            Red (1, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.DarkRed">
            <summary>
            Dark Red (0.6f, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Green">
            <summary>
            Green (0, 1, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Blue">
            <summary>
            Blue (0, 0, 1, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Yellow">
            <summary>
            Yellow (1, 1, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Grey">
            <summary>
            Grey (0.25f, 0.25f, 0.25f, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.LightGrey">
            <summary>
            Light Grey (0.65f, 0.65f, 0.65f, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Cyan">
            <summary>
            Cyan (0, 1, 1, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.White">
            <summary>
            White (1, 1, 1, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.CornflowerBlue">
            <summary>
            Cornflower Blue (0.3921f, 0.5843f, 0.9294f, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Clear">
            <summary>
            Clear (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Black">
            <summary>
            Black (0, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Pink">
            <summary>
            Pink (1, 0.45f, 0.75f, 1)
            </summary>
        </member>
        <member name="F:Veldrid.RgbaFloat.Orange">
            <summary>
            Orange (1, 0.36f, 0, 1)
            </summary>
        </member>
        <member name="M:Veldrid.RgbaFloat.ToVector4">
            <summary>
            Converts this RgbaFloat into a Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Veldrid.RgbaFloat.Equals(Veldrid.RgbaFloat)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.RgbaFloat.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Veldrid.RgbaFloat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Veldrid.RgbaFloat.ToString">
            <summary>
            Returns a string representation of this color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Veldrid.RgbaFloat.op_Equality(Veldrid.RgbaFloat,Veldrid.RgbaFloat)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:Veldrid.RgbaFloat.op_Inequality(Veldrid.RgbaFloat,Veldrid.RgbaFloat)">
            <summary>
            Element-wise inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="T:Veldrid.Sampler">
            <summary>
            A bindable device resource which controls how texture values are sampled within a shader.
            See <see cref="T:Veldrid.SamplerDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Sampler.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Sampler.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.SamplerAddressMode">
            <summary>
            An addressing mode for texture coordinates.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerAddressMode.Wrap">
            <summary>
            Texture coordinates are wrapped upon overflow.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerAddressMode.Mirror">
            <summary>
            Texture coordinates are mirrored upon overflow.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerAddressMode.Clamp">
            <summary>
            Texture coordinates are clamped to the maximum or minimum values upon overflow.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerAddressMode.Border">
            <summary>
            Texture coordinates that overflow return the predefined border color defined in
            <see cref="F:Veldrid.SamplerDescription.BorderColor"/>.
            </summary>
        </member>
        <member name="T:Veldrid.SamplerBorderColor">
            <summary>
            A constant color that is sampled when <see cref="F:Veldrid.SamplerAddressMode.Border"/> is used.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerBorderColor.TransparentBlack">
            <summary>
            Transparent Black (0, 0, 0, 0)
            </summary>
        </member>
        <member name="F:Veldrid.SamplerBorderColor.OpaqueBlack">
            <summary>
            Opaque Black (0, 0, 0, 1)
            </summary>
        </member>
        <member name="F:Veldrid.SamplerBorderColor.OpaqueWhite">
            <summary>
            Opaque White (1, 1, 1, 1)
            </summary>
        </member>
        <member name="T:Veldrid.SamplerDescription">
            <summary>
            Describes a <see cref="T:Veldrid.Sampler"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.AddressModeU">
            <summary>
            The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the U (or S) coordinate.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.AddressModeV">
            <summary>
            The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the V (or T) coordinate.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.AddressModeW">
            <summary>
            The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the W (or R) coordinate.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.Filter">
            <summary>
            The filter used when sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.ComparisonKind">
            <summary>
            An optional value controlling the kind of comparison to use when sampling. If null, comparison sampling is not used.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.MaximumAnisotropy">
            <summary>
            The maximum anisotropy of the filter, when <see cref="F:Veldrid.SamplerFilter.Anisotropic"/> is used, or otherwise ignored.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.MinimumLod">
            <summary>
            The minimum level of detail.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.MaximumLod">
            <summary>
            The maximum level of detail.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.LodBias">
            <summary>
            The level of detail bias.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.BorderColor">
            <summary>
            The constant color that is sampled when <see cref="F:Veldrid.SamplerAddressMode.Border"/> is used, or otherwise ignored.
            </summary>
        </member>
        <member name="M:Veldrid.SamplerDescription.#ctor(Veldrid.SamplerAddressMode,Veldrid.SamplerAddressMode,Veldrid.SamplerAddressMode,Veldrid.SamplerFilter,System.Nullable{Veldrid.ComparisonKind},System.UInt32,System.UInt32,System.UInt32,System.Int32,Veldrid.SamplerBorderColor)">
            <summary>
            Constructs a new SamplerDescription.
            </summary>
            <param name="addressModeU">The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the U (or R) coordinate.</param>
            <param name="addressModeV">The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the V (or S) coordinate.</param>
            <param name="addressModeW">The <see cref="T:Veldrid.SamplerAddressMode"/> mode to use for the W (or T) coordinate.</param>
            <param name="filter">The filter used when sampling.</param>
            <param name="comparisonKind">An optional value controlling the kind of comparison to use when sampling. If null,
            comparison sampling is not used.</param>
            <param name="maximumAnisotropy">The maximum anisotropy of the filter, when <see cref="F:Veldrid.SamplerFilter.Anisotropic"/> is
            used, or otherwise ignored.</param>
            <param name="minimumLod">The minimum level of detail.</param>
            <param name="maximumLod">The maximum level of detail.</param>
            <param name="lodBias">The level of detail bias.</param>
            <param name="borderColor">The constant color that is sampled when <see cref="F:Veldrid.SamplerAddressMode.Border"/> is used, or
            otherwise ignored.</param>
        </member>
        <member name="F:Veldrid.SamplerDescription.Point">
            <summary>
            Describes a common point-filter sampler, with wrapping address mode.
            Settings:
                AddressModeU = SamplerAddressMode.Wrap
                AddressModeV = SamplerAddressMode.Wrap
                AddressModeW = SamplerAddressMode.Wrap
                Filter = SamplerFilter.MinPoint_MagPoint_MipPoint
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 0
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.Linear">
            <summary>
            Describes a common linear-filter sampler, with wrapping address mode.
            Settings:
                AddressModeU = SamplerAddressMode.Wrap
                AddressModeV = SamplerAddressMode.Wrap
                AddressModeW = SamplerAddressMode.Wrap
                Filter = SamplerFilter.MinLinear_MagLinear_MipLinear
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 0
            </summary>
        </member>
        <member name="F:Veldrid.SamplerDescription.Aniso4x">
            <summary>
            Describes a common 4x-anisotropic-filter sampler, with wrapping address mode.
            Settings:
                AddressModeU = SamplerAddressMode.Wrap
                AddressModeV = SamplerAddressMode.Wrap
                AddressModeW = SamplerAddressMode.Wrap
                Filter = SamplerFilter.Anisotropic
                LodBias = 0
                MinimumLod = 0
                MaximumLod = uint.MaxValue
                MaximumAnisotropy = 4
            </summary>
        </member>
        <member name="M:Veldrid.SamplerDescription.Equals(Veldrid.SamplerDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.SamplerDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.SamplerFilter">
            <summary>
            Determines how texture values are sampled from a texture.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinPoint_MagPoint_MipPoint">
            <summary>
            Point sampling is used for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinPoint_MagPoint_MipLinear">
            <summary>
            Point sampling is used for minification and magnification; linear interpolation is used for mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinPoint_MagLinear_MipPoint">
            <summary>
            Point sampling is used for minification and mip-level sampling; linear interpolation is used for mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinPoint_MagLinear_MipLinear">
            <summary>
            Point sampling is used for minification; linear interpolation is used for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinLinear_MagPoint_MipPoint">
            <summary>
            Linear interpolation is used for minifcation; point sampling is used for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinLinear_MagPoint_MipLinear">
            <summary>
            Linear interpolation is used for minification and mip-level sampling; point sampling is used for magnification.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinLinear_MagLinear_MipPoint">
            <summary>
            Linear interpolation is used for minification and magnification, and point sampling is used for mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.MinLinear_MagLinear_MipLinear">
            <summary>
            Linear interpolation is used for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Veldrid.SamplerFilter.Anisotropic">
            <summary>
            Anisotropic filtering is used. The maximum anisotropy is controlled by
            <see cref="F:Veldrid.SamplerDescription.MaximumAnisotropy"/>.
            </summary>
        </member>
        <member name="T:Veldrid.Shader">
            <summary>
            A device resource encapsulating a single shader module.
            See <see cref="T:Veldrid.ShaderDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Shader.Stage">
            <summary>
            The shader stage this instance can be used in.
            </summary>
        </member>
        <member name="P:Veldrid.Shader.EntryPoint">
            <summary>
            The name of the entry point function.
            </summary>
        </member>
        <member name="P:Veldrid.Shader.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Shader.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.ShaderConstantType">
            <summary>
            The data type of a shader constant.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Bool">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.UInt16">
            <summary>
            A 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Int16">
            <summary>
            A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.UInt32">
            <summary>
            A 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Int32">
            <summary>
            A 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.UInt64">
            <summary>
            A 64-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Int64">
            <summary>
            A 64-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Float">
            <summary>
            A 32-bit floating-point value.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderConstantType.Double">
            <summary>
            A 64-bit floating-point value.
            </summary>
        </member>
        <member name="T:Veldrid.ShaderDescription">
            <summary>
            Describes a <see cref="T:Veldrid.Shader"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderDescription.Stage">
            <summary>
            The shader stage this instance describes.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderDescription.ShaderBytes">
            <summary>
            An array containing the raw shader bytes.
            For Direct3D11 shaders, this array must contain HLSL bytecode or HLSL text.
            For Vulkan shaders, this array must contain SPIR-V bytecode.
            For OpenGL and OpenGL ES shaders, this array must contain the ASCII-encoded text of the shader code.
            For Metal shaders, this array must contain Metal bitcode (a "metallib" file), or UTF8-encoded Metal shading language
            text.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderDescription.EntryPoint">
            <summary>
            The name of the entry point function in the shader module to be used in this stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderDescription.Debug">
            <summary>
            Indicates whether the shader should be debuggable. This flag only has an effect if <see cref="F:Veldrid.ShaderDescription.ShaderBytes"/> contains
            shader code that will be compiled.
            </summary>
        </member>
        <member name="M:Veldrid.ShaderDescription.#ctor(Veldrid.ShaderStages,System.Byte[],System.String)">
            <summary>
            Constructs a new ShaderDescription.
            </summary>
            <param name="stage">The shader stage to create.</param>
            <param name="shaderBytes">An array containing the raw shader bytes.</param>
            <param name="entryPoint">The name of the entry point function in the shader module to be used in this stage.</param>
        </member>
        <member name="M:Veldrid.ShaderDescription.#ctor(Veldrid.ShaderStages,System.Byte[],System.String,System.Boolean)">
            <summary>
            Constructs a new ShaderDescription.
            </summary>
            <param name="stage">The shader stage to create.</param>
            <param name="shaderBytes">An array containing the raw shader bytes.</param>
            <param name="entryPoint">The name of the entry point function in the shader module to be used in this stage.</param>
            <param name="debug">Indicates whether the shader should be debuggable. This flag only has an effect if
            <paramref name="shaderBytes"/> contains shader code that will be compiled.</param>
        </member>
        <member name="M:Veldrid.ShaderDescription.Equals(Veldrid.ShaderDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and if array instances are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ShaderDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ShaderSetDescription">
            <summary>
            A <see cref="T:Veldrid.Pipeline"/> component describing a full set of shader stages and vertex layouts.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderSetDescription.VertexLayouts">
            <summary>
            An array of <see cref="T:Veldrid.VertexLayoutDescription"/> describing the set of vertex layouts understood by the
            <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes the input layout of a single <see cref="T:Veldrid.DeviceBuffer"/>
            to be bound when drawing.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderSetDescription.Shaders">
            <summary>
            An array of <see cref="T:Veldrid.Shader"/> objects, one for each shader stage which is to be active in the
            <see cref="T:Veldrid.Pipeline"/>. At a minimum, every graphics Pipeline must include a Vertex and Fragment
            shader. All other stages are optional, but if either Tessellation stage is present, then the other must also be.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderSetDescription.Specializations">
            <summary>
            An array of <see cref="T:Veldrid.SpecializationConstant"/> used to override specialization constants in the created
            <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes a single ID-value pair, which will be matched with the
            constants specified in each <see cref="T:Veldrid.Shader"/>.
            </summary>
        </member>
        <member name="M:Veldrid.ShaderSetDescription.#ctor(Veldrid.VertexLayoutDescription[],Veldrid.Shader[])">
            <summary>
            Constructs a new ShaderSetDescription.
            </summary>
            <param name="vertexLayouts">An array of <see cref="T:Veldrid.VertexLayoutDescription"/> describing the set of vertex layouts
            understood by the <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes the input layout of a single
            <see cref="T:Veldrid.DeviceBuffer"/> to be bound when drawing.</param>
            <param name="shaders">An array of <see cref="T:Veldrid.Shader"/> objects, one for each shader stage which is to be active
            in the <see cref="T:Veldrid.Pipeline"/>. At a minimum, every graphics Pipeline must include a Vertex and Fragment shader. All
            other stages are optional, but if either Tessellation stage is present, then the other must also be.</param>
        </member>
        <member name="M:Veldrid.ShaderSetDescription.#ctor(Veldrid.VertexLayoutDescription[],Veldrid.Shader[],Veldrid.SpecializationConstant[])">
            <summary>
            Constructs a new ShaderSetDescription.
            </summary>
            <param name="vertexLayouts">An array of <see cref="T:Veldrid.VertexLayoutDescription"/> describing the set of vertex layouts
            understood by the <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes the input layout of a single
            <see cref="T:Veldrid.DeviceBuffer"/> to be bound when drawing.</param>
            <param name="shaders">An array of <see cref="T:Veldrid.Shader"/> objects, one for each shader stage which is to be active
            in the <see cref="T:Veldrid.Pipeline"/>. At a minimum, every graphics Pipeline must include a Vertex and Fragment shader. All
            other stages are optional, but if either Tessellation stage is present, then the other must also be.</param>
            <param name="specializations">An array of <see cref="T:Veldrid.SpecializationConstant"/> used to override specialization
            constants in the created <see cref="T:Veldrid.Pipeline"/>. Each element in this array describes a single ID-value pair, which
            will be matched with the constants specified in each <see cref="T:Veldrid.Shader"/>.</param>
        </member>
        <member name="M:Veldrid.ShaderSetDescription.Equals(Veldrid.ShaderSetDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.ShaderSetDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.ShaderStages">
            <summary>
            A bitmask representing a set of shader stages.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.None">
            <summary>
            No stages.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.Vertex">
            <summary>
            The vertex shader stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.Geometry">
            <summary>
            The geometry shader stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.TessellationControl">
            <summary>
            The tessellation control (or hull) shader stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.TessellationEvaluation">
            <summary>
            The tessellation evaluation (or domain) shader stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.Fragment">
            <summary>
            The fragment (or pixel) shader stage.
            </summary>
        </member>
        <member name="F:Veldrid.ShaderStages.Compute">
            <summary>
            The compute shader stage.
            </summary>
        </member>
        <member name="T:Veldrid.SpecializationConstant">
            <summary>
            Describes a single shader specialization constant. Used to substitute new values into Shaders when constructing a
            <see cref="T:Veldrid.Pipeline"/>.
            </summary>
        </member>
        <member name="F:Veldrid.SpecializationConstant.ID">
            <summary>
            The constant variable ID, as defined in the <see cref="T:Veldrid.Shader"/>.
            </summary>
        </member>
        <member name="F:Veldrid.SpecializationConstant.Type">
            <summary>
            The type of data stored in this instance. Must be a scalar numeric type.
            </summary>
        </member>
        <member name="F:Veldrid.SpecializationConstant.Data">
            <summary>
            An 8-byte block storing the contents of the specialization value. This is treated as an untyped buffer and is
            interepreted according to <see cref="F:Veldrid.SpecializationConstant.Type"/>.
            </summary>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,Veldrid.ShaderConstantType,System.UInt64)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/>.
            </summary>
            <param name="id">The constant variable ID, as defined in the <see cref="T:Veldrid.Shader"/>.</param>
            <param name="type">The type of data stored in this instance. Must be a scalar numeric type.</param>
            <param name="data">An 8-byte block storing the contents of the specialization value. This is treated as an untyped
            buffer and is interepreted according to <see cref="F:Veldrid.SpecializationConstant.Type"/>.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a boolean.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.UInt16)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 16-bit unsigned integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Int16)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 16-bit signed integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 32-bit unsigned integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 32-bit signed integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.UInt64)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 64-bit unsigned integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Int64)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 64-bit signed integer.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Single)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 32-bit floating-point value.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.#ctor(System.UInt32,System.Double)">
            <summary>
            Constructs a new <see cref="T:Veldrid.SpecializationConstant"/> for a 64-bit floating-point value.
            </summary>
            <param name="id">The constant variable ID.</param>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Veldrid.SpecializationConstant.Equals(Veldrid.SpecializationConstant)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.SpecializationConstant.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.StencilBehaviorDescription">
            <summary>
            Describes how stencil tests are performed in a <see cref="T:Veldrid.Pipeline"/>'s depth-stencil state.
            </summary>
        </member>
        <member name="F:Veldrid.StencilBehaviorDescription.Fail">
            <summary>
            The operation performed on samples that fail the stencil test.
            </summary>
        </member>
        <member name="F:Veldrid.StencilBehaviorDescription.Pass">
            <summary>
            The operation performed on samples that pass the stencil test.
            </summary>
        </member>
        <member name="F:Veldrid.StencilBehaviorDescription.DepthFail">
            <summary>
            The operation performed on samples that pass the stencil test but fail the depth test.
            </summary>
        </member>
        <member name="F:Veldrid.StencilBehaviorDescription.Comparison">
            <summary>
            The comparison operator used in the stencil test.
            </summary>
        </member>
        <member name="M:Veldrid.StencilBehaviorDescription.#ctor(Veldrid.StencilOperation,Veldrid.StencilOperation,Veldrid.StencilOperation,Veldrid.ComparisonKind)">
            <summary>
            Constructs a new StencilBehaviorDescription.
            </summary>
            <param name="fail">The operation performed on samples that fail the stencil test.</param>
            <param name="pass">The operation performed on samples that pass the stencil test.</param>
            <param name="depthFail">The operation performed on samples that pass the stencil test but fail the depth test.</param>
            <param name="comparison">The comparison operator used in the stencil test.</param>
        </member>
        <member name="M:Veldrid.StencilBehaviorDescription.Equals(Veldrid.StencilBehaviorDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.StencilBehaviorDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.StencilOperation">
            <summary>
            Identifies an action taken on samples that pass or fail the stencil test.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.Keep">
            <summary>
            Keep the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.Zero">
            <summary>
            Sets the value to 0.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.Replace">
            <summary>
            Replaces the existing value with <see cref="F:Veldrid.DepthStencilStateDescription.StencilReference"/>.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.IncrementAndClamp">
            <summary>
            Increments the existing value and clamps it to the maximum representable unsigned value.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.DecrementAndClamp">
            <summary>
            Decrements the existing value and clamps it to 0.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.Invert">
            <summary>
            Bitwise-inverts the existing value.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.IncrementAndWrap">
            <summary>
            Increments the existing value and wraps it to 0 when it exceeds the maximum representable unsigned value.
            </summary>
        </member>
        <member name="F:Veldrid.StencilOperation.DecrementAndWrap">
            <summary>
            Decrements the existing value and wraps it to the maximum representable unsigned value if it would be reduced below
            0.
            </summary>
        </member>
        <member name="T:Veldrid.Swapchain">
            <summary>
            A device resource providing the ability to present rendered images to a visible surface.
            See <see cref="T:Veldrid.SwapchainDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.Swapchain.Framebuffer">
            <summary>
            Gets a <see cref="P:Veldrid.Swapchain.Framebuffer"/> representing the render targets of this instance.
            </summary>
        </member>
        <member name="M:Veldrid.Swapchain.Resize(System.UInt32,System.UInt32)">
            <summary>
            Resizes the renderable Textures managed by this instance to the given dimensions.
            </summary>
            <param name="width">The new width of the Swapchain.</param>
            <param name="height">The new height of the Swapchain.</param>
        </member>
        <member name="P:Veldrid.Swapchain.SyncToVerticalBlank">
            <summary>
            Gets or sets whether presentation of this Swapchain will be synchronized to the window system's vertical refresh
            rate.
            </summary>
        </member>
        <member name="P:Veldrid.Swapchain.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Swapchain.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.SwapchainDescription">
            <summary>
            Describes a <see cref="T:Veldrid.Swapchain"/>, for creation via a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.Source">
            <summary>
            The <see cref="T:Veldrid.SwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.Width">
            <summary>
            The initial width of the Swapchain surface.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.Height">
            <summary>
            The initial height of the Swapchain surface.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.DepthFormat">
            <summary>
            The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.SyncToVerticalBlank">
            <summary>
            Indicates whether presentation of the Swapchain will be synchronized to the window system's vertical refresh rate.
            </summary>
        </member>
        <member name="F:Veldrid.SwapchainDescription.ColorSrgb">
            <summary>
            Indicates whether the color target of the Swapchain will use an sRGB PixelFormat.
            </summary>
        </member>
        <member name="M:Veldrid.SwapchainDescription.#ctor(Veldrid.SwapchainSource,System.UInt32,System.UInt32,System.Nullable{Veldrid.PixelFormat},System.Boolean)">
            <summary>
            Constructs a new SwapchainDescription.
            </summary>
            <param name="source">The <see cref="T:Veldrid.SwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.</param>
            <param name="width">The initial width of the Swapchain surface.</param>
            <param name="height">The initial height of the Swapchain surface.</param>
            <param name="depthFormat">The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.</param>
            <param name="syncToVerticalBlank">Indicates whether presentation of the Swapchain will be synchronized to the window
            system's vertical refresh rate.</param>
        </member>
        <member name="M:Veldrid.SwapchainDescription.#ctor(Veldrid.SwapchainSource,System.UInt32,System.UInt32,System.Nullable{Veldrid.PixelFormat},System.Boolean,System.Boolean)">
            <summary>
            Constructs a new SwapchainDescription.
            </summary>
            <param name="source">The <see cref="T:Veldrid.SwapchainSource"/> which will be used as the target of rendering operations.
            This is a window-system-specific object which differs by platform.</param>
            <param name="width">The initial width of the Swapchain surface.</param>
            <param name="height">The initial height of the Swapchain surface.</param>
            <param name="depthFormat">The optional format of the depth target of the Swapchain's Framebuffer.
            If non-null, this must be a valid depth Texture format.
            If null, then no depth target will be created.</param>
            <param name="syncToVerticalBlank">Indicates whether presentation of the Swapchain will be synchronized to the window
            system's vertical refresh rate.</param>
            <param name="colorSrgb">Indicates whether the color target of the Swapchain will use an sRGB PixelFormat.</param>
        </member>
        <member name="M:Veldrid.SwapchainDescription.Equals(Veldrid.SwapchainDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.SwapchainDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.SwapchainSource">
            <summary>
            A platform-specific object representing a renderable surface.
            A SwapchainSource can be created with one of several static factory methods.
            A SwapchainSource is used to describe a Swapchain (see <see cref="T:Veldrid.SwapchainDescription"/>).
            </summary>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateWin32(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a new SwapchainSource for a Win32 window.
            </summary>
            <param name="hwnd">The Win32 window handle.</param>
            <param name="hinstance">The Win32 instance handle.</param>
            <returns>A new SwapchainSource which can be used to create a <see cref="T:Veldrid.Swapchain"/> for the given Win32 window.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateUwp(System.Object,System.Single)">
            <summary>
            Creates a new SwapchainSource for a UWP SwapChain panel.
            </summary>
            <param name="swapChainPanel">A COM object which must implement the <see cref="T:SharpDX.DXGI.ISwapChainPanelNative"/>
            or <see cref="T:SharpDX.DXGI.ISwapChainBackgroundPanelNative"/> interface. Generally, this should be a SwapChainPanel
            or SwapChainBackgroundPanel contained in your application window.</param>
            <param name="logicalDpi">The logical DPI of the swapchain panel.</param>
            <returns>A new SwapchainSource which can be used to create a <see cref="T:Veldrid.Swapchain"/> for the given UWP panel.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateXlib(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a new SwapchainSource from the given Xlib information.
            </summary>
            <param name="display">An Xlib Display.</param>
            <param name="window">An Xlib Window.</param>
            <returns>A new SwapchainSource which can be used to create a <see cref="T:Veldrid.Swapchain"/> for the given Xlib window.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateWayland(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a new SwapchainSource from the given Wayland information.
            </summary>
            <param name="display">The Wayland display proxy.</param>
            <param name="surface">The Wayland surface proxy to map.</param>
            <returns>A new SwapchainSource which can be used to create a <see cref="T:Veldrid.Swapchain"/> for the given Wayland surface.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateNSWindow(System.IntPtr)">
            <summary>
            Creates a new SwapchainSource for the given NSWindow.
            </summary>
            <param name="nsWindow">A pointer to an NSWindow.</param>
            <returns>A new SwapchainSource which can be used to create a Metal <see cref="T:Veldrid.Swapchain"/> for the given NSWindow.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateUIView(System.IntPtr)">
            <summary>
            Creates a new SwapchainSource for the given UIView.
            </summary>
            <param name="uiView">The UIView's native handle.</param>
            <returns>A new SwapchainSource which can be used to create a Metal <see cref="T:Veldrid.Swapchain"/> or an OpenGLES
            <see cref="T:Veldrid.GraphicsDevice"/> for the given UIView.
            </returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateAndroidSurface(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a new SwapchainSource for the given Android Surface.
            </summary>
            <param name="surfaceHandle">The handle of the Android Surface.</param>
            <param name="jniEnv">The Java Native Interface Environment handle.</param>
            <returns>A new SwapchainSource which can be used to create a Vulkan <see cref="T:Veldrid.Swapchain"/> or an OpenGLES
            <see cref="T:Veldrid.GraphicsDevice"/> for the given Android Surface.</returns>
        </member>
        <member name="M:Veldrid.SwapchainSource.CreateNSView(System.IntPtr)">
            <summary>
            Creates a new SwapchainSource for the given NSView.
            </summary>
            <param name="nsView">A pointer to an NSView.</param>
            <returns>A new SwapchainSource which can be used to create a Metal <see cref="T:Veldrid.Swapchain"/> for the given NSView.
            </returns>
        </member>
        <member name="T:Veldrid.Texture">
            <summary>
            A device resource used to store arbitrary image data in a specific format.
            See <see cref="T:Veldrid.TextureDescription"/>.
            </summary>
        </member>
        <member name="M:Veldrid.Texture.CalculateSubresource(System.UInt32,System.UInt32)">
            <summary>
            Calculates the subresource index, given a mipmap level and array layer.
            </summary>
            <param name="mipLevel">The mip level. This should be less than <see cref="P:Veldrid.Texture.MipLevels"/>.</param>
            <param name="arrayLayer">The array layer. This should be less than <see cref="P:Veldrid.Texture.ArrayLayers"/>.</param>
            <returns>The subresource index.</returns>
        </member>
        <member name="P:Veldrid.Texture.Format">
            <summary>
            The format of individual texture elements stored in this instance.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Width">
            <summary>
            The total width of this instance, in texels.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Height">
            <summary>
            The total height of this instance, in texels.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Depth">
            <summary>
            The total depth of this instance, in texels.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.MipLevels">
            <summary>
            The total number of mipmap levels in this instance.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.ArrayLayers">
            <summary>
            The total number of array layers in this instance.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Usage">
            <summary>
            The usage flags given when this instance was created. This property controls how this instance is permitted to be
            used, and it is an error to attempt to use the Texture outside of those contexts.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Type">
            <summary>
            The <see cref="T:Veldrid.TextureType"/> of this instance.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.SampleCount">
            <summary>
            The number of samples in this instance. If this returns any value other than <see cref="F:Veldrid.TextureSampleCount.Count1"/>,
            then this instance is a multipsample texture.
            </summary>
        </member>
        <member name="P:Veldrid.Texture.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.Texture.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.TextureDescription">
            <summary>
            Describes a <see cref="T:Veldrid.Texture"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Width">
            <summary>
            The total width, in texels.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Height">
            <summary>
            The total height, in texels.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Depth">
            <summary>
            The total depth, in texels.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.MipLevels">
            <summary>
            The number of mipmap levels.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.ArrayLayers">
            <summary>
            The number of array layers.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Format">
            <summary>
            The format of individual texture elements.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Usage">
            <summary>
            Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader, then
            <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            If the Texture will be used as a 2D cubemap, then <see cref="F:Veldrid.TextureUsage.Cubemap"/> must be included.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.Type">
            <summary>
            The type of Texture to create.
            </summary>
        </member>
        <member name="F:Veldrid.TextureDescription.SampleCount">
            <summary>
            The number of samples. If equal to <see cref="F:Veldrid.TextureSampleCount.Count1"/>, this instance does not describe a
            multisample <see cref="T:Veldrid.Texture"/>.
            </summary>
        </member>
        <member name="M:Veldrid.TextureDescription.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage,Veldrid.TextureType)">
            <summary>
            Contsructs a new TextureDescription describing a non-multisampled <see cref="T:Veldrid.Texture"/>.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="height">The total height, in texels.</param>
            <param name="depth">The total depth, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="arrayLayers">The number of array layers.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            If the Texture will be used as a 2D cubemap, then <see cref="F:Veldrid.TextureUsage.Cubemap"/> must be included.</param>
            <param name="type">The type of Texture to create.</param>
        </member>
        <member name="M:Veldrid.TextureDescription.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage,Veldrid.TextureType,Veldrid.TextureSampleCount)">
            <summary>
            Contsructs a new TextureDescription.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="height">The total height, in texels.</param>
            <param name="depth">The total depth, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="arrayLayers">The number of array layers.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            If the Texture will be used as a 2D cubemap, then <see cref="F:Veldrid.TextureUsage.Cubemap"/> must be included.</param>
            <param name="type">The type of Texture to create.</param>
            <param name="sampleCount">The number of samples. If any other value than <see cref="F:Veldrid.TextureSampleCount.Count1"/> is
            provided, then this describes a multisample texture.</param>
        </member>
        <member name="M:Veldrid.TextureDescription.Texture1D(System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage)">
            <summary>
            Creates a description for a non-multisampled 1D Texture.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="arrayLayers">The number of array layers.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            </param>
            <returns>A new TextureDescription for a non-multisampled 1D Texture.</returns>
        </member>
        <member name="M:Veldrid.TextureDescription.Texture2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage)">
            <summary>
            Creates a description for a non-multisampled 2D Texture.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="height">The total height, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="arrayLayers">The number of array layers.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            If the Texture will be used as a 2D cubemap, then <see cref="F:Veldrid.TextureUsage.Cubemap"/> must be included.</param>
            <returns>A new TextureDescription for a non-multisampled 2D Texture.</returns>
        </member>
        <member name="M:Veldrid.TextureDescription.Texture2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage,Veldrid.TextureSampleCount)">
            <summary>
            Creates a description for a 2D Texture.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="height">The total height, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="arrayLayers">The number of array layers.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.
            If the Texture will be used as a 2D cubemap, then <see cref="F:Veldrid.TextureUsage.Cubemap"/> must be included.</param>
            <param name="sampleCount">The number of samples. If any other value than <see cref="F:Veldrid.TextureSampleCount.Count1"/> is
            provided, then this describes a multisample texture.</param>
            <returns>A new TextureDescription for a 2D Texture.</returns>
        </member>
        <member name="M:Veldrid.TextureDescription.Texture3D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,Veldrid.PixelFormat,Veldrid.TextureUsage)">
            <summary>
            Creates a description for a 3D Texture.
            </summary>
            <param name="width">The total width, in texels.</param>
            <param name="height">The total height, in texels.</param>
            <param name="depth">The total depth, in texels.</param>
            <param name="mipLevels">The number of mipmap levels.</param>
            <param name="format">The format of individual texture elements.</param>
            <param name="usage">Controls how the Texture is permitted to be used. If the Texture will be sampled from a shader,
            then <see cref="F:Veldrid.TextureUsage.Sampled"/> must be included. If the Texture will be used as a depth target in a
            <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.DepthStencil"/> must be included. If the Texture will be used
            as a color target in a <see cref="T:Veldrid.Framebuffer"/>, then <see cref="F:Veldrid.TextureUsage.RenderTarget"/> must be included.</param>
            <returns>A new TextureDescription for a 3D Texture.</returns>
        </member>
        <member name="M:Veldrid.TextureDescription.Equals(Veldrid.TextureDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.TextureDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.TextureSampleCount">
            <summary>
            Describes the number of samples to use in a <see cref="T:Veldrid.Texture"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count1">
            <summary>
            1 sample (no multi-sampling).
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count2">
            <summary>
            2 Samples.
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count4">
            <summary>
            4 Samples.
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count8">
            <summary>
            8 Samples.
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count16">
            <summary>
            16 Samples.
            </summary>
        </member>
        <member name="F:Veldrid.TextureSampleCount.Count32">
            <summary>
            32 Samples.
            </summary>
        </member>
        <member name="T:Veldrid.TextureType">
            <summary>
            Identifies a particular type of Texture.
            </summary>
        </member>
        <member name="F:Veldrid.TextureType.Texture1D">
            <summary>
            A one-dimensional Texture.
            </summary>
        </member>
        <member name="F:Veldrid.TextureType.Texture2D">
            <summary>
            A two-dimensional Texture.
            </summary>
        </member>
        <member name="F:Veldrid.TextureType.Texture3D">
            <summary>
            A three-dimensional Texture.
            </summary>
        </member>
        <member name="T:Veldrid.TextureUsage">
            <summary>
            A bitmask indicating how a <see cref="T:Veldrid.Texture"/> is permitted to be used.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.Sampled">
            <summary>
            The Texture can be used as the target of a read-only <see cref="T:Veldrid.TextureView"/>, and can be accessed from a shader.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.Storage">
            <summary>
            The Texture can be used as the target of a read-write <see cref="T:Veldrid.TextureView"/>, and can be accessed from a shader.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.RenderTarget">
            <summary>
            The Texture can be used as the color target of a <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.DepthStencil">
            <summary>
            The Texture can be used as the depth target of a <see cref="T:Veldrid.Framebuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.Cubemap">
            <summary>
            The Texture is a two-dimensional cubemap.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.Staging">
            <summary>
            The Texture is used as a read-write staging resource for uploading Texture data.
            With this flag, a Texture can be mapped using the <see cref="M:Veldrid.GraphicsDevice.Map(Veldrid.MappableResource,Veldrid.MapMode,System.UInt32)"/>
            method.
            </summary>
        </member>
        <member name="F:Veldrid.TextureUsage.GenerateMipmaps">
            <summary>
            The Texture supports automatic generation of mipmaps through <see cref="M:Veldrid.CommandList.GenerateMipmaps(Veldrid.Texture)"/>.
            </summary>
        </member>
        <member name="T:Veldrid.TextureView">
            <summary>
            A bindable device resource which provides a shader with access to a sampled <see cref="T:Veldrid.Texture"/> object.
            See <see cref="T:Veldrid.TextureViewDescription"/>.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.Target">
            <summary>
            The target <see cref="T:Veldrid.Texture"/> object to be sampled via this instance.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.BaseMipLevel">
            <summary>
            The base mip level visible in the view.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.MipLevels">
            <summary>
            The number of mip levels visible in the view.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.BaseArrayLayer">
            <summary>
            The base array layer visible in the view.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.ArrayLayers">
            <summary>
            The number of array layers visible in the view.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.Format">
            <summary>
            The format used to interpret the contents of the target Texture. This may be different from the target Texture's
            true storage format, but it will be the same size.
            </summary>
        </member>
        <member name="P:Veldrid.TextureView.Name">
            <summary>
            A string identifying this instance. Can be used to differentiate between objects in graphics debuggers and other
            tools.
            </summary>
        </member>
        <member name="M:Veldrid.TextureView.Dispose">
            <summary>
            Frees unmanaged device resources controlled by this instance.
            </summary>
        </member>
        <member name="T:Veldrid.TextureViewDescription">
            <summary>
            Describes a <see cref="T:Veldrid.TextureView"/>, for creation using a <see cref="T:Veldrid.ResourceFactory"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.Target">
            <summary>
            The desired target <see cref="T:Veldrid.Texture"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.BaseMipLevel">
            <summary>
            The base mip level visible in the view. Must be less than <see cref="P:Veldrid.Texture.MipLevels"/>.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.MipLevels">
            <summary>
            The number of mip levels visible in the view.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.BaseArrayLayer">
            <summary>
            The base array layer visible in the view.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.ArrayLayers">
            <summary>
            The number of array layers visible in the view.
            </summary>
        </member>
        <member name="F:Veldrid.TextureViewDescription.Format">
            <summary>
            An optional <see cref="T:Veldrid.PixelFormat"/> which specifies how the data within <see cref="F:Veldrid.TextureViewDescription.Target"/> will be viewed.
            If this value is null, then the created TextureView will use the same <see cref="T:Veldrid.PixelFormat"/> as the target
            <see cref="T:Veldrid.Texture"/>. If not null, this format must be "compatible" with the target Texture's. For uncompressed
            formats, the overall size and number of components in this format must be equal to the underlying format. For
            compressed formats, it is only possible to use the same PixelFormat or its sRGB/non-sRGB counterpart.
            </summary>
        </member>
        <member name="M:Veldrid.TextureViewDescription.#ctor(Veldrid.Texture)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Veldrid.Texture"/>. This <see cref="T:Veldrid.Texture"/> must have been created
            with the <see cref="F:Veldrid.TextureUsage.Sampled"/> usage flag.</param>
        </member>
        <member name="M:Veldrid.TextureViewDescription.#ctor(Veldrid.Texture,Veldrid.PixelFormat)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Veldrid.Texture"/>. This <see cref="T:Veldrid.Texture"/> must have been created
            with the <see cref="F:Veldrid.TextureUsage.Sampled"/> usage flag.</param>
            <param name="format">Specifies how the data within the target Texture will be viewed.
            This format must be "compatible" with the target Texture's. For uncompressed formats, the overall size and number of
            components in this format must be equal to the underlying format. For compressed formats, it is only possible to use
            the same PixelFormat or its sRGB/non-sRGB counterpart.</param>
        </member>
        <member name="M:Veldrid.TextureViewDescription.#ctor(Veldrid.Texture,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Veldrid.Texture"/>.</param>
            <param name="baseMipLevel">The base mip level visible in the view. Must be less than <see cref="P:Veldrid.Texture.MipLevels"/>.
            </param>
            <param name="mipLevels">The number of mip levels visible in the view.</param>
            <param name="baseArrayLayer">The base array layer visible in the view.</param>
            <param name="arrayLayers">The number of array layers visible in the view.</param>
        </member>
        <member name="M:Veldrid.TextureViewDescription.#ctor(Veldrid.Texture,Veldrid.PixelFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new TextureViewDescription.
            </summary>
            <param name="target">The desired target <see cref="T:Veldrid.Texture"/>.</param>
            <param name="format">Specifies how the data within the target Texture will be viewed.
            This format must be "compatible" with the target Texture's. For uncompressed formats, the overall size and number of
            components in this format must be equal to the underlying format. For compressed formats, it is only possible to use
            the same PixelFormat or its sRGB/non-sRGB counterpart.</param>
            <param name="baseMipLevel">The base mip level visible in the view. Must be less than <see cref="P:Veldrid.Texture.MipLevels"/>.
            </param>
            <param name="mipLevels">The number of mip levels visible in the view.</param>
            <param name="baseArrayLayer">The base array layer visible in the view.</param>
            <param name="arrayLayers">The number of array layers visible in the view.</param>
        </member>
        <member name="M:Veldrid.TextureViewDescription.Equals(Veldrid.TextureViewDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.TextureViewDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.VeldridException">
            <summary>
            Represents errors that occur in the Veldrid library.
            </summary>
        </member>
        <member name="M:Veldrid.VeldridException.#ctor">
            <summary>
            Constructs a new VeldridException.
            </summary>
        </member>
        <member name="M:Veldrid.VeldridException.#ctor(System.String)">
            <summary>
            Constructs a new Veldridexception with the given message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Veldrid.VeldridException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new Veldridexception with the given message and inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Veldrid.VertexElementDescription">
            <summary>
            Describes a single element of a vertex.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementDescription.Name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementDescription.Semantic">
            <summary>
            The semantic type of the element.
            NOTE: When using Veldrid.SPIRV, all vertex elements will use
            <see cref="F:Veldrid.VertexElementSemantic.TextureCoordinate"/>.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementDescription.Format">
            <summary>
            The format of the element.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementDescription.Offset">
            <summary>
            The offset in bytes from the beginning of the vertex.
            </summary>
        </member>
        <member name="M:Veldrid.VertexElementDescription.#ctor(System.String,Veldrid.VertexElementSemantic,Veldrid.VertexElementFormat)">
            <summary>
            Constructs a new VertexElementDescription describing a per-vertex element.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="semantic">The semantic type of the element.</param>
            <param name="format">The format of the element.</param>
        </member>
        <member name="M:Veldrid.VertexElementDescription.#ctor(System.String,Veldrid.VertexElementFormat,Veldrid.VertexElementSemantic)">
            <summary>
            Constructs a new VertexElementDescription.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="semantic">The semantic type of the element.</param>
            <param name="format">The format of the element.</param>
        </member>
        <member name="M:Veldrid.VertexElementDescription.#ctor(System.String,Veldrid.VertexElementSemantic,Veldrid.VertexElementFormat,System.UInt32)">
            <summary>
            Constructs a new VertexElementDescription.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="semantic">The semantic type of the element.</param>
            <param name="format">The format of the element.</param>
            <param name="offset">The offset in bytes from the beginning of the vertex.</param>
        </member>
        <member name="M:Veldrid.VertexElementDescription.Equals(Veldrid.VertexElementDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.VertexElementDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.VertexElementFormat">
            <summary>
            The format of an individual vertex element.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Float1">
            <summary>
            One 32-bit floating point value.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Float2">
            <summary>
            Two 32-bit floating point values.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Float3">
            <summary>
            Three 32-bit floating point values.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Float4">
            <summary>
            Four 32-bit floating point values.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Byte2_Norm">
            <summary>
            Two 8-bit unsigned normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Byte2">
            <summary>
            Two 8-bit unisgned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Byte4_Norm">
            <summary>
            Four 8-bit unsigned normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Byte4">
            <summary>
            Four 8-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.SByte2_Norm">
            <summary>
            Two 8-bit signed normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.SByte2">
            <summary>
            Two 8-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.SByte4_Norm">
            <summary>
            Four 8-bit signed normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.SByte4">
            <summary>
            Four 8-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UShort2_Norm">
            <summary>
            Two 16-bit unsigned normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UShort2">
            <summary>
            Two 16-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UShort4_Norm">
            <summary>
            Four 16-bit unsigned normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UShort4">
            <summary>
            Four 16-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Short2_Norm">
            <summary>
            Two 16-bit signed normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Short2">
            <summary>
            Two 16-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Short4_Norm">
            <summary>
            Four 16-bit signed normalized integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Short4">
            <summary>
            Four 16-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UInt1">
            <summary>
            One 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UInt2">
            <summary>
            Two 32-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UInt3">
            <summary>
            Three 32-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.UInt4">
            <summary>
            Four 32-bit unsigned integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Int1">
            <summary>
            One 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Int2">
            <summary>
            Two 32-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Int3">
            <summary>
            Three 32-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Int4">
            <summary>
            Four 32-bit signed integers.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Half1">
            <summary>
            One 16-bit floating point value.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Half2">
            <summary>
            Two 16-bit floating point values.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementFormat.Half4">
            <summary>
            Four 16-bit floating point values.
            </summary>
        </member>
        <member name="T:Veldrid.VertexElementSemantic">
            <summary>
            The type of a vertex element, describing how the element is interpreted.
            NOTE: This enumeration is only meaningful for the Direct3D 11 backend.
            When using Veldrid.SPIRV to cross-compile a vertex shader to HLSL, all vertex elements will
            use <see cref="F:Veldrid.VertexElementSemantic.TextureCoordinate"/>.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementSemantic.Position">
            <summary>
            A position.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementSemantic.Normal">
            <summary>
            A normal direction.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementSemantic.TextureCoordinate">
            <summary>
            A texture coordinate.
            </summary>
        </member>
        <member name="F:Veldrid.VertexElementSemantic.Color">
            <summary>
            A color.
            </summary>
        </member>
        <member name="T:Veldrid.VertexLayoutDescription">
            <summary>
            Describes the layout of vertex data in a single <see cref="T:Veldrid.DeviceBuffer"/> used as a vertex buffer.
            </summary>
        </member>
        <member name="F:Veldrid.VertexLayoutDescription.Stride">
            <summary>
            The number of bytes in between successive elements in the <see cref="T:Veldrid.DeviceBuffer"/>.
            </summary>
        </member>
        <member name="F:Veldrid.VertexLayoutDescription.Elements">
            <summary>
            An array of <see cref="T:Veldrid.VertexElementDescription"/> objects, each describing a single element of vertex data.
            </summary>
        </member>
        <member name="F:Veldrid.VertexLayoutDescription.InstanceStepRate">
            <summary>
            A value controlling how often data for instances is advanced for this layout. For per-vertex elements, this value
            should be 0.
            For example, an InstanceStepRate of 3 indicates that 3 instances will be drawn with the same value for this layout. The
            next 3 instances will be drawn with the next value, and so on.
            </summary>
        </member>
        <member name="M:Veldrid.VertexLayoutDescription.#ctor(System.UInt32,Veldrid.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription.
            </summary>
            <param name="stride">The number of bytes in between successive elements in the <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="elements">An array of <see cref="T:Veldrid.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
        </member>
        <member name="M:Veldrid.VertexLayoutDescription.#ctor(System.UInt32,System.UInt32,Veldrid.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription.
            </summary>
            <param name="stride">The number of bytes in between successive elements in the <see cref="T:Veldrid.DeviceBuffer"/>.</param>
            <param name="elements">An array of <see cref="T:Veldrid.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
            <param name="instanceStepRate">A value controlling how often data for instances is advanced for this element. For
            per-vertex elements, this value should be 0.
            For example, an InstanceStepRate of 3 indicates that 3 instances will be drawn with the same value for this element.
            The next 3 instances will be drawn with the next value for this element, and so on.</param>
        </member>
        <member name="M:Veldrid.VertexLayoutDescription.#ctor(Veldrid.VertexElementDescription[])">
            <summary>
            Constructs a new VertexLayoutDescription. The stride is assumed to be the sum of the size of all elements.
            </summary>
            <param name="elements">An array of <see cref="T:Veldrid.VertexElementDescription"/> objects, each describing a single element
            of vertex data.</param>
        </member>
        <member name="M:Veldrid.VertexLayoutDescription.Equals(Veldrid.VertexLayoutDescription)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements and all array elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.VertexLayoutDescription.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.Viewport">
            <summary>
            Describes a 3-dimensional region.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.X">
            <summary>
            The minimum X value.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.Y">
            <summary>
            The minimum Y value.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.MinDepth">
            <summary>
            The minimum depth.
            </summary>
        </member>
        <member name="F:Veldrid.Viewport.MaxDepth">
            <summary>
            The maximum depth.
            </summary>
        </member>
        <member name="M:Veldrid.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Viewport.
            </summary>
            <param name="x">The minimum X value.</param>
            <param name="y">The minimum Y value.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minDepth">The minimum depth.</param>
            <param name="maxDepth">The maximum depth.</param>
        </member>
        <member name="M:Veldrid.Viewport.Equals(Veldrid.Viewport)">
            <summary>
            Element-wise equality.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if all elements are equal; false otherswise.</returns>
        </member>
        <member name="M:Veldrid.Viewport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Veldrid.Vk.StackList`1">
            <summary>
            A super-dangerous stack-only list which can hold up to 256 bytes of blittable data.
            </summary>
            <typeparam name="T">The type of element held in the list. Must be blittable.</typeparam>
        </member>
        <member name="T:Veldrid.Vk.StackList`2">
            <summary>
            A super-dangerous stack-only list which can hold a number of bytes determined by the second type parameter.
            </summary>
            <typeparam name="T">The type of element held in the list. Must be blittable.</typeparam>
            <typeparam name="TSize">A type parameter dictating the capacity of the list.</typeparam>
        </member>
        <member name="T:Veldrid.Vk.VkSurfaceSource">
            <summary>
            An object which can be used to create a VkSurfaceKHR.
            </summary>
        </member>
        <member name="M:Veldrid.Vk.VkSurfaceSource.CreateSurface(Vulkan.VkInstance)">
            <summary>
            Creates a new VkSurfaceKHR attached to this source.
            </summary>
            <param name="instance">The VkInstance to use.</param>
            <returns>A new VkSurfaceKHR.</returns>
        </member>
        <member name="M:Veldrid.Vk.VkSurfaceSource.CreateWin32(System.IntPtr,System.IntPtr)">
            <summary>
            Creates a new <see cref="T:Veldrid.Vk.VkSurfaceSource"/> from the given Win32 instance and window handle.
            </summary>
            <param name="hinstance">The Win32 instance handle.</param>
            <param name="hwnd">The Win32 window handle.</param>
            <returns>A new VkSurfaceSource.</returns>
        </member>
        <member name="M:Veldrid.Vk.VkSurfaceSource.CreateXlib(Vulkan.Xlib.Display*,Vulkan.Xlib.Window)">
            <summary>
            Creates a new VkSurfaceSource from the given Xlib information.
            </summary>
            <param name="display">A pointer to the Xlib Display.</param>
            <param name="window">An Xlib window.</param>
            <returns>A new VkSurfaceSource.</returns>
        </member>
        <member name="T:Veldrid.VulkanDeviceOptions">
            <summary>
            A structure describing Vulkan-specific device creation options.
            </summary>
        </member>
        <member name="F:Veldrid.VulkanDeviceOptions.InstanceExtensions">
            <summary>
            An array of required Vulkan instance extensions. Entries in this array will be enabled in the GraphicsDevice's
            created VkInstance.
            </summary>
        </member>
        <member name="F:Veldrid.VulkanDeviceOptions.DeviceExtensions">
            <summary>
            An array of required Vulkan device extensions. Entries in this array will be enabled in the GraphicsDevice's
            created VkDevice.
            </summary>
        </member>
        <member name="M:Veldrid.VulkanDeviceOptions.#ctor(System.String[],System.String[])">
            <summary>
            Constructs a new VulkanDeviceOptions.
            </summary>
            <param name="instanceExtensions">An array of required Vulkan instance extensions. Entries in this array will be
            enabled in the GraphicsDevice's created VkInstance.</param>
            <param name="deviceExtensions">An array of required Vulkan device extensions. Entries in this array will be enabled
            in the GraphicsDevice's created VkDevice.</param>
        </member>
    </members>
</doc>
